# _____________________________________________________________________________
# *****************************************************************************
# Autor: José Antonio Quiñonero gris
# Fecha de creación: 5 de octubre de 2021
# *****************************************************************************
# -----------------------------------------------------------------------------

# Calculo y representacion del oscilador armonico cuantico unidimensional
# acoplado.

# -----------------------------------------------------------------------------
# Librerias
# -----------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt
from math import factorial
from scipy.special import hermite
from matplotlib import animation

# Usar mi estilo para las graficas
plt.style.use('mine')
# plt.style.use('scientific')

# *****************************************************************************
# INICIO
# *****************************************************************************

# -----------------------------------------------------------------------------
# Definicion de constantes
# -----------------------------------------------------------------------------

# Realizo el calculo en unidades atomicas, por lo que
hbar = 1                       # Constante de Planck reducida
m = 1                          # Masa de la particula
k = 1                          # Constante de fuerza
omega = np.sqrt(k/m)           # Momento angular: omega = (k/m)^(1/2)

# Definicion del vector espacio
x = np.linspace(-10, 10, 250)

# -----------------------------------------------------------------------------
# Funciones propias del oscilador armonico unidimensional
# -----------------------------------------------------------------------------

# Funcion potencial
def V(x):
    return (1/2) * k * x**2

# Valores propios de la energia
def E(v):
    return (v + 1/2) * hbar * omega

# Definicion de una constante 'alpha' para simplificar la formulacion
alpha = m * omega/hbar

# Variable de desplazamiento xi
def xi(x):
    return np.sqrt(alpha) * x

# Constante de normalizacion
def N(v):
    return ( np.sqrt(alpha/np.pi) * (1/(2**v * factorial(v))) )**(1/2)

# Funcion exponencial a diferenciar
def diff_expo(x):
    return np.exp(-xi(x)**2)

# Funcion exponencial
def expo(x):
    return np.exp(-(xi(x)**2)/2)

# Polinomios de Hermite
def Hv(v,x):
    herm = hermite(v)
    P_v = herm(x)
    return P_v

# Componente temporal de funciones
def time_expo(v,t):
    return np.exp(-1j * E(v) * t/hbar)

# Funciones propias
def phi(v,x,t):
    return N(v) * expo(x) * Hv(v,x) * time_expo(v,t)

# Densidad de probabilidad
def dens_phi(v,x,t):
    return np.conj(phi(v,x,t)) * phi(v,x,t)

def psi(x,t):
    return (1/2) * phi(0,x,t) + (1/2) * phi(1,x,t)

def dens_psi(x,t):
    return np.conj(psi(x,t)) * psi(x,t)

# *****************************************************************************
# ANIMACIONES
# *****************************************************************************

# Acoplamiento del estado fundamental y el primer estado excitado con la
# misma contribucion.
# Simbolizo con psi la funcion de onda

# =============================================================================
# Animaciones en 2D
# =============================================================================

# -----------------------------------------------------------------------------
# Animacion 1: variacion de la funcion de onda junto a su densidad de
# probabilidad
# -----------------------------------------------------------------------------

# First set up the figure, the axis, and the plot element we want to animate
fig = plt.figure()
fig.suptitle(r'$\Psi\,(x,t) = (1/2)\varphi_0\,(x,t) + (1/2)\varphi_1\,(x,t)$')
ax = plt.axes(xlim=(-3, 3), ylim=(-1, 1))
# ax.axhline(y = 0, color='black')
# ax.plot(x, V(x), color='gray')
line, = ax.plot([], [], label=r'$\Psi\,(x,t)$', lw=2)
line2, = ax.plot([], [], label=r'$\left| \Psi\,(x,t) \right|^2$', lw=2)
ax.set_xlabel(r'$x\ (a_0)$')
ax.set_ylabel(r'$\mathrm{Re}\left\{ f\,(x) \right\}$')
ax.legend()
# ax.grid()

# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    return line,

# animation function.  This is called sequentially
dt = 1./24  # 30 fps
t0 = 0
def animate1(i):
    t = t0 + (dt * i)
    x = np.linspace(-10, 10, 250)
    y = psi(x,t).real
    y2 = dens_psi(x,t).real
    line.set_data(x, y)
    line2.set_data(x, y2)

    return line, line2,

# call the animator.  blit=True means only re-draw the parts that have changed.
anim = animation.FuncAnimation(fig, animate1, init_func=init,
                               frames=300, interval=1, blit=True)

# save the animation as an mp4.  This requires ffmpeg or mencoder to be
# installed.  The extra_args ensure that the x264 codec is used, so that
# the video can be embedded in html5.  You may need to adjust this for
# your system: for more information, see
# http://matplotlib.sourceforge.net/api/animation_api.html

# anim.save('animaciones/oscilador_acoplado_prueba1.mp4', fps=30, extra_args=['-vcodec', 'libx264'])

plt.show()

# -----------------------------------------------------------------------------
# Segunda animacion: densidad de probabilidad junto a la curva de potencial
# -----------------------------------------------------------------------------

fig2 = plt.figure()
fig2.suptitle(r'$\Psi\,(x,t) = (1/2)\varphi_0\,(x,t) + (1/2)\varphi_1\,(x,t)$')
ax = plt.axes(xlim=(-3, 3), ylim=(0, 1))
# ax.axhline(y = 0, color='black')
ax.plot(x, V(x), label=r'$V\,(x)$', color='gray')
line, = ax.plot([], [], label=r'$\left| \Psi\,(x,t) \right|^2$', lw=2)
ax.set_xlabel(r'$x\ (a_0)$')
ax.set_ylabel(r'$\mathrm{Re}\left\{ \Psi\,(x,t) \right\}$')
ax.legend()
# ax.grid()

# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    return line,

# animation function.  This is called sequentially
dt = 1./24  # 30 fps
t0 = 0
def animate2(i):
    t = t0 + (dt * i)
    x = np.linspace(-10, 10, 250)
    y = dens_psi(x,t).real
    line.set_data(x, y)

    return line,

# call the animator.  blit=True means only re-draw the parts that have changed.
anim = animation.FuncAnimation(fig2, animate2, init_func=init,
                               frames=300, interval=1, blit=True)

# save the animation as an mp4.  This requires ffmpeg or mencoder to be
# installed.  The extra_args ensure that the x264 codec is used, so that
# the video can be embedded in html5.  You may need to adjust this for
# your system: for more information, see
# http://matplotlib.sourceforge.net/api/animation_api.html

# anim.save('animaciones/oscilador_acoplado_densidad.mp4', fps=30, extra_args=['-vcodec', 'libx264'])

plt.show()

# =============================================================================
# Animaciones en 3D
# =============================================================================
xmin = -3
xmax = 3
x = np.linspace(xmin, xmax, 250)

fig3 = plt.figure()
# fig3.suptitle(r'$\psi\,(x,t) = (1/2)\varphi_0\,(x,t) + (1/2)\varphi_1\,(x,t)$')
ax = plt.axes(projection='3d', xlim=(xmin,xmax), ylim=(-1,1), zlim=(-1,1))
line, = ax.plot([], [], [], label=r'$\psi\,(x,t)$', lw=2)
line2, = ax.plot([], [], [], label=r'$\left| \psi\,(x,t) \right|^2$', lw=2)
ax.plot(x,np.linspace(0,0,250),np.linspace(0,0,250), color='black', lw=1)
# Titulo
ax.set(title=r'$\psi\,(x,t) = (1/2)\varphi_0\,(x,t) + (1/2)\varphi_1\,(x,t)$')
# Labels
ax.set_xlabel(r'$x\ (a_0)$')
ax.set_ylabel(r'$\mathrm{Imag}(\psi\,(x,t))$')
ax.set_zlabel(r'$\mathrm{Re}(\psi\,(x,t))$')
ax.legend(loc=(1.01,0.5))
#Ticks
# plt.tick_params(
#     axis='both',          # changes apply to the x-axis
#     which='both',      # both major and minor ticks are affected
#     bottom=False,      # ticks along the bottom edge are off
#     top=False,         # ticks along the top edge are off
#     labelbottom=False) # labels along the bottom edge are off

# for major ticks
ax.set_xticks([])
# for minor ticks
ax.set_xticks([], minor=True)
# for major ticks
ax.set_yticks([])
# for minor ticks
ax.set_yticks([], minor=True)
# for major ticks
ax.set_zticks([])
# for minor ticks
ax.set_zticks([], minor=True)

ax.view_init(10,65)

# initialization function: plot the background of each frame
def init():
    line.set_data([], [])
    return line,

# animation function.  This is called sequentially
dt = 1./20  # 30 fps
t0 = 0
def animate3(i):
    t = t0 + (dt * i)
    y = psi(x,t).imag
    z = psi(x,t).real
    line.set_data(x, y)
    line.set_3d_properties(z)
    y2 = dens_psi(x,t).imag
    z2 = dens_psi(x,t).real
    line2.set_data(x, y2)
    line2.set_3d_properties(z2)
    #
    return line, line2,


# call the animator.  blit=True means only re-draw the parts that have changed.
anim = animation.FuncAnimation(fig3, animate3, init_func=init,
                               frames=300, interval=1, blit=True)

# save the animation as an mp4.  This requires ffmpeg or mencoder to be
# installed.  The extra_args ensure that the x264 codec is used, so that
# the video can be embedded in html5.  You may need to adjust this for
# your system: for more information, see
# http://matplotlib.sourceforge.net/api/animation_api.html

# anim.save('animaciones/oscilador_acoplado_3D.mp4', fps=30, extra_args=['-vcodec', 'libx264'])

plt.show()
