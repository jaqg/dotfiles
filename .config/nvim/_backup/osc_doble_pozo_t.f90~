! _____________________________________________________________________________
! *****************************************************************************
! Autor: José Antonio Quiñonero Gris
! Fecha de creación: 12 de abril de 2022
! *****************************************************************************
! -----------------------------------------------------------------------------

! -----------------------------------------------------------------------------
! PROGRAMA PRINCIPAL
! -----------------------------------------------------------------------------
program osc_doble_pozo

    ! Problema del doble pozo
    ! Ĥ = -hbar**2/(2*m) <v|d2/dx2|v> + a <v|x4|v> - b <v|x2|v>
    ! donde a,b > 0

    ! Programa para calcular las energias y parametros variacionales
    ! diagonalizando la matriz del hamiltoniano, de manera que
    ! Hc = Ec
    ! donde H es una matriz real simetrica de elementos Hij=<i|Ĥ|j>
    ! Obtendremos como autovalores las energias variacionales, E
    ! y como autovectores los coeficientes variacionales c

    ! IMPLICIT REAL*8(A-H,O-Z)
    ! IMPLICIT INTEGER(I-N)

    implicit none

    ! =======================
    ! Definicion de variables
    ! =======================

    integer :: i,j,l,jj, j_arr, fu
    logical :: T,F

    COMMON hbar,m
    ! Unidades atomicas
    real*8 :: hbar=1.0, m=1.0
    ! Numero de funciones base
    integer :: N, Nmax, Npar, Nimpar, N_conver
    ! Parametro de perturbacion cuartica
    real*8 :: a
    ! Parametro de perturbacion cuadratica
    real*8 :: b
    ! Resultado de la funcion para el parametro alpha
    real*8 :: alpha
    ! Resultado de la funcion para la integral sobre d2/dx2
    real*8 :: derivada
    ! Resultado de la funcion para la integral sobre x2
    real*8 :: cuadratica
    ! Resultado de la funcion para la integral sobre x4
    real*8 :: cuartica
    ! Integrales del hamiltoniano, elementos Hij
    real*8 :: H
    ! Matriz del hamiltoniano
    real*8, dimension(:,:), allocatable :: H_par, H_impar
    ! Array para los valores propios de la energia
    real*8, dimension(:), allocatable :: E, E_par, E_impar
    ! Array de energias para cada N
    real*8, dimension(:,:), allocatable :: E_arr
    ! Variables para los valores de energia del bucle para hallar N_conver
    real*8 :: E_sup, E_inf, Delta_E, E_conver
    ! Array necesaria para la subrutina de diagonalizacion
    real*8, dimension(:), allocatable :: work
    ! Declaracion de parametros necesarios para la subrutina que calcula los
    ! eigenvalues
    integer :: nr, lwork, info
    ! Array auxiliar para tabla de energias
    real*8, dimension(21,4) :: E_tabla
    ! Altura de la barrera de potencial
    real*8 :: Vb
    ! Variables para la posicion, x
    real*8 :: x, xmin, xmax, dx
    ! Array posicion
    real*8, dimension(:), allocatable :: x_vec
    ! Variable para la funcion potencial
    real*8 :: V
    ! Array potencial
    real*8, dimension(:), allocatable :: V_vec
    ! Numero de valores de x
    integer :: steps_x
    ! Funciones propias del oscilador
    real*8 :: phi
    ! Vector funcion de prueba y densidad de probabilidad
    real*8 :: Phi0, Phi1, Phi2, Phi3, Phi4, Phi5
    real*8, dimension(:), allocatable :: Phi0_vec, Phi1_vec, Phi2_vec, &
                                         Phi3_vec, Phi4_vec, Phi5_vec
    real*8 :: dPhi0, dPhi1, dPhi2, dPhi3, dPhi4, dPhi5
    real*8, dimension(:), allocatable :: dPhi0_vec, dPhi1_vec, dPhi2_vec, &
                                         dPhi3_vec, dPhi4_vec, dPhi5_vec
    ! Para la evolucion temporal
    real*8 :: Phi0_t, Phi1_t, Phi2_t, Phi3_t, Phi4_t, Phi5_t
    real*8, dimension(:), allocatable :: Phi0_arrt, Phi1_arrt, Phi2_arrt, &
                                         Phi3_arrt, Phi4_arrt, Phi5_arrt
    real*8 :: dPhi0_t, dPhi1_t, dPhi2_t, dPhi3_t, dPhi4_t, dPhi5_t
    real*8, dimension(:), allocatable :: dPhi0_arrt, dPhi1_arrt, dPhi2_arrt, &
                                         dPhi3_arrt, dPhi4_arrt, dPhi5_arrt

    ! ===================
    ! INICIO DEL PROGRAMA
    ! ===================

    ! Evitar units=0,5,6
    ! Apertura y lectura del fichero con los datos iniciales
    open(unit=1, file="data/in-osc_doble_pozo.dat")
    open(unit=2, file="data/in-potencial.dat")
    ! Omite la primera linea del archivo de datos de entrada
    read(1,*)
    read(2,*)
    ! Lee los datos de entrada
    read(1,*) Nmax, a, b
    read(2,*) xmin, xmax, dx
    close(1)
    close(2)

    ! Apertura del fichero de resultados
    open(unit=2,  file="data/out-energias_variacionales.dat")
    open(unit=3,  file="data/out-Econver_n=0,5,10,15.dat")
    open(unit=4,  file="data/out-E_arr.dat")
    open(unit=7,  file="data/out-N_vs_W0.dat")
    open(unit=8,  file="data/out-N_vs_W5.dat")
    open(unit=9,  file="data/out-N_vs_W10.dat")
    open(unit=10, file="data/out-N_vs_W15.dat")
    open(unit=11, file="data/out-energias.dat")
    open(unit=12, file="data/out-conver_energias.dat")
    open(unit=20, file="data/out-coeficientes_par.dat")
    open(unit=21, file="data/out-coeficientes_impar.dat")
    open(unit=30, file="data/out-potencial.dat")
    open(unit=40, file="data/out-funciones_pares.dat")
    open(unit=41, file="data/out-densidad_prob_pares.dat")
    open(unit=42, file="data/out-funciones_impares.dat")
    open(unit=43, file="data/out-densidad_prob_impares.dat")
    open(unit=50, file="data/out-funciones_pares_t.dat")
    open(unit=51, file="data/out-densidad_prob_pares_t.dat")
    open(unit=52, file="data/out-funciones_impares_t.dat")
    open(unit=53, file="data/out-densidad_prob_impares_t.dat")


    ! Formatos
    9999 format('====================================================&
                    =============================')
    9998 format('----------------------------------------------------&
                    -----------------------------')
    9997 format(2x, "N", 8x, "W0",  13x, "W1",  13x, "W2",  13x, "W3",  13x,&
                             "W4",  13x, "W5",  13x, "W6",  13x, "W7",  13x,&
                             "W8",  13x, "W9",  13x, "W10", 13x, "W11", 13x,&
                             "W12", 13x, "W13", 13x, "W14", 13x, "W15", 13x,&
                             "W16", 13x, "W17", 13x, "W18", 13x, "W19", 13x,&
                             "W20")
    9996 format(2x, "i", 6x,"c_i(Phi_0)", 5x,"c_i(Phi_2)", 5x,"c_i(Phi_4)",&
                         5x,"c_i(Phi_6)", 5x,"c_i(Phi_8)", 5x,"c_i(Phi_10)")
    9995 format(2x, "i", 6x,"c_i(Phi_1)", 5x,"c_i(Phi_3)", 5x,"c_i(Phi_5)",&
                         5x,"c_i(Phi_7)", 5x,"c_i(Phi_9)")
    9994 format(2x, "n", 5x, "W_n(conv.)", 3x, "N_conv.")

    ! Bucle principal:
    ! Para cada valor de d
    !   Para N funciones base
    !       Crea y escribe la matriz H
    !       Halla los valores y vectores propios
    !       Escribe los resultados
    allocate(E_arr(Nmax,Nmax))

    ! Calcula el valor de alpha optimizado para la perturbacion d
    call alpha_opt(a, alpha)

    ! Calcula la altura de la barrera, Vb
    call altura_barrera(a, b, Vb)
    ! write(*,'("a =", f5.2, 2x, "b =", f5.2, 2x, "Vb =", f5.2)') a, b, Vb

    ! Escribe la primera fila de las tablas
    ! - Fichero 2 -
    write(2,9999)
    write(2,'(34x, "a =", f5.2, 2x, "b =", f5.2)') a, b
    write(2,9998)
    write(2,'(2x, "N", 8x, "W0", 13x, "W1", 13x, "W2", 13x, "W3", 13x,&
                "W4", 13x, "W5", 13x, "W6", 13x, "W7")')

    ! - Fichero 3 -
    write(3,9999)
    write(3,'("a =", f5.2, 2x, "b =", f5.2)') a, b
    write(3,9998)
    write(3,9994)
    write(3,9998)

    ! - Fichero 4 -
    write(4,9999)
    write(4,'(34x, "a =", f5.2, 2x, "b =", f5.2)') a, b
    write(4,9998)

    ! - Ficheros 14, 15 y 16 -
    write(12,9994)

    ! - Fichero 30 -
    write(30,'("a =", f5.2, 2x, "b =", f5.2)') a, b
    write(30,9998)
    write(30,'(6x, "x", 12x, "V(x)")')

    ! - Fichero 40 -
    write(40,'("a =", f5.2, 2x, "b =", f5.2)') a, b
    write(40,9998)
    write(40,'(6x, "x", 11x, "Phi0(x)", 8x, "Phi2(x)", 8x, "Phi4(x)")')

    ! - Fichero 41 -
    write(41,'("a =", f5.2, 2x, "b =", f5.2)') a, b
    write(41,9998)
    write(41,'(6x, "x", 11x, "|Phi0|^2", 7x, "|Phi2|^2", 7x, "|Phi4|^2")')

    ! - Fichero 42 -
    write(42,'("a =", f5.2, 2x, "b =", f5.2)') a, b
    write(42,9998)
    write(42,'(6x, "x", 11x, "Phi1(x)", 8x, "Phi3(x)", 8x, "Phi5(x)")')

    ! - Fichero 43 -
    write(43,'("a =", f5.2, 2x, "b =", f5.2)') a, b
    write(43,9998)
    write(43,'(6x, "x", 11x, "|Phi1|^2", 7x, "|Phi3|^2", 7x, "|Phi5|^2")')

    ! Bucle para crear array x y potencial
    steps_x = int((xmax - xmin)/dx)

    allocate(x_vec(steps_x), V_vec(steps_x))
    allocate(Phi0_vec(steps_x), Phi1_vec(steps_x), Phi2_vec(steps_x), &
             Phi3_vec(steps_x), Phi4_vec(steps_x), Phi5_vec(steps_x))
    allocate(dPhi0_vec(steps_x), dPhi1_vec(steps_x), dPhi2_vec(steps_x), &
             dPhi3_vec(steps_x), dPhi4_vec(steps_x), dPhi5_vec(steps_x))


    do i=1, steps_x+1, 1
        x = xmin + (dx * float(i-1))
        x_vec(i) = x
        V_vec(i) = V(a,b,x) + Vb
        write(30,'(f10.3, 10000f15.5)') x_vec(i), V_vec(i)
    end do

    ! Halla los resultados para cada valor de N
    j_arr = 0 ! Variable auxiliar
    do_N: do N=2, Nmax, 1
        ! Da dimensiones al array de energias variacionales
        allocate(E(N))
        ! y del array 'work' para la subrutina de diagonalizacion
        allocate(work(3*N))

        ! Si N es par, Npar = N/2 = Nimpar
        ! Si N es impar, Npar = N/2 + 1 y Nimpar = N - Npar
        ! NOTA: Si btest(i,0) = F, i es par
        if (btest(N,0).eqv.F) then
            Nimpar = N/2
            Npar = N - Nimpar
        else
            Nimpar = N/2
            Npar = N - Nimpar
        end if

        ! write(*,*) 'N =', N, 'Npar =', Npar, 'Nimpar =', Nimpar

        ! ------------
        ! MATRIZ PAR
        ! ------------

        ! Da dimensiones a la matriz par del hamiltoniano
        allocate(H_par(Npar,Npar))
        ! y de valores propios
        allocate(E_par(Npar))

        ! write(*,*) 'Matriz PAR ','d =', d, 'N =', N, 'Npar =', Npar
        ! Crear la matriz del hamiltoniano par
        H_par(:,:) = 0.0
        do_filas_par: do i=1, Npar, 1
            do_columnas_par: do j=1, Npar, 1
                ! Calcula los elementos de la matriz y almacenalos
                H_par(i,j) = H(2*(i-1),2*(j-1),a,b,alpha)
            end do do_columnas_par
            ! Escribe la matriz
            ! write(*,'(100g15.5)') ( H_par(i,j), j=1,Npar )
        end do do_filas_par
        ! write(*,*) '---'
        ! Rutina para calcular los valores propios
        lwork = 3*N
        call dsyev ( 'V', 'U', Npar, H_par, Npar, E_par,&
                     work, lwork, info )
        ! Los valores propios de la energia son guardados en E
        ! Los vectores propios, los coeficientes de la combinacion lineal,
        ! son guardados en la matriz H_mat a la salida
        ! Cada columna de la matriz H_mat, a la salida, da un eigenvector
        ! H_mat(j,i)
        !   j = indice de la funcion base
        !   i = indice del valor propio

        ! Si la diagonalizacion ha funcionado, info = 0
        if (info/= 0) then
            write(*,*) 'La diagonalizacion de la matriz H_par ha fallado'
            write(*,*) 'INFO =', info
            stop
        end if

        ! Escribe el array E
        do i=1, Npar, 1
            ! Ordena los valores pares en las posiciones impares
            E(2*i - 1) = E_par(i) + Vb
        end do

        ! Escribe los coeficientes variacionales de las funciones pares
        if (N==Nmax) then
            write(20,9996)
            do j=1, Npar, 1
            write(20,'(i3.1,100f15.5)') 2*(j-1),(H_par(j,i),i=1,6)
            end do
         end if

        ! write(*,*) 'a =', a, 'N =', N, 'Ep0 =', E_par(1)

        if (N==Nmax) then
            do i=1, steps_x+1, 1
                x = x_vec(i)
                Phi0 = 0.0
                Phi2 = 0.0
                Phi4 = 0.0
                do j=1, Npar, 1
                    ! Para agilizar el calculo, impongo la condicion de que
                    ! los coeficientes de la combinacion c<0.001 no
                    ! contribuyan a la combinacion
                    if (abs(H_par(j,1))>0.001) then
                        Phi0 = Phi0 + H_par(j,1)*phi(2*(j-1),x)
                        Phi2 = Phi2 + H_par(j,2)*phi(2*(j-1),x)
                        Phi4 = Phi4 + H_par(j,3)*phi(2*(j-1),x)
                    else
                        exit
                    end if
                end do
                Phi0_vec(i) = Phi0 + E(1)
                Phi2_vec(i) = Phi2 + E(3)
                Phi4_vec(i) = Phi4 + E(5)
                dPhi0_vec(i) = Phi0**2 + E(1)
                dPhi2_vec(i) = Phi2**2 + E(3)
                dPhi4_vec(i) = Phi4**2 + E(5)
                write(40,'(f10.3, 10000f15.5)') x, Phi0_vec(i), &
                                                   Phi2_vec(i), &
                                                   Phi4_vec(i)
                write(41,'(f10.3, 10000f15.5)') x, dPhi0_vec(i), &
                                                   dPhi2_vec(i), &
                                                   dPhi4_vec(i)
            end do
        end if

        ! Borra las matrices
        deallocate(H_par)
        deallocate(E_par)

        ! ------------
        ! MATRIZ IMPAR
        ! ------------

        ! Da dimensiones a la matriz impar del hamiltoniano
        allocate(H_impar(Nimpar,Nimpar))
        ! y de valores propios
        allocate(E_impar(Nimpar))

        ! write(*,*) 'Matriz IMPAR ','d =',d,'N =',N,'Nimpar =',Nimpar
        ! Crear la matriz del hamiltoniano impar
        H_impar(:,:) = 0.0
        do_filas_impar: do i=1, Nimpar, 1
            do_columnas_impar: do j=1, Nimpar, 1
                ! Calcula los elementos de la matriz y almacenalos
                H_impar(i,j) = H(2*i-1,2*j-1,a,b,alpha)
            end do do_columnas_impar
            ! Escribe la matriz
            ! write(*,'(100g15.5)') ( H_impar(i,j), j=1,Nimpar )
        end do do_filas_impar
        ! write(*,*) '---'
        ! Rutina para calcular los valores propios
        lwork = 3*N
        call dsyev ( 'V', 'U', Nimpar, H_impar, Nimpar, E_impar,&
                     work, lwork, info )

        ! Los valores propios de la energia son guardados en E
        ! Los vectores propios, los coeficientes de la combinacion lineal,
        ! son guardados en la matriz H_mat a la salida
        ! Cada columna de la matriz H_mat, a la salida, da un eigenvector
        ! H_mat(j,i)
        !   j = indice de la funcion base
        !   i = indice del valor propio

        ! Si la diagonalizacion ha funcionado, info = 0
        if (info/= 0) then
            write(*,*) 'La diagonalizacion de la matriz H_impar ha fallado'
            write(*,*) 'INFO =', info
            stop
        end if

        ! Escribe el array E
        do i=1, Nimpar, 1
            ! Ordena los valores impares en las posiciones impares
            E(2*i) = E_impar(i) + Vb
        end do

        ! Escribe los coeficientes variacionales de las funciones impares
        if (N==Nmax) then
            write(21,9995)
            do j=1, Nimpar, 1
                write(21,'(i3.1,100f15.5)') 2*j-1, (H_impar(j,i),i=1,5)
            end do
         end if

        ! write(*,*) 'd =', d, 'N =', N, 'Ei0 =', E_impar(1)

        if (N==Nmax) then
            do i=1, steps_x+1, 1
                x = x_vec(i)
                Phi1 = 0.0
                Phi3 = 0.0
                Phi5 = 0.0
                do j=1, Nimpar, 1
                    ! Para agilizar el calculo, impongo la condicion de que
                    ! los coeficientes de la combinacion c<0.001 no
                    ! contribuyan a la combinacion
                    if (abs(H_impar(j,1))>0.001) then
                        Phi1 = Phi1 + H_impar(j,1)*phi(2*j-1,x)
                        Phi3 = Phi3 + H_impar(j,2)*phi(2*j-1,x)
                        Phi5 = Phi5 + H_impar(j,3)*phi(2*j-1,x)
                    else
                        exit
                    end if
                end do
                Phi1_vec(i) = Phi1 + E(2)
                Phi3_vec(i) = Phi3 + E(4)
                Phi5_vec(i) = Phi5 + E(6)
                dPhi1_vec(i) = Phi1**2 + E(2)
                dPhi3_vec(i) = Phi3**2 + E(4)
                dPhi5_vec(i) = Phi5**2 + E(6)
                write(42,'(f10.3, 10000f15.5)') x, Phi1_vec(i), &
                                                   Phi3_vec(i), &
                                                   Phi5_vec(i)
                write(43,'(f10.3, 10000f15.5)') x, dPhi1_vec(i), &
                                                   dPhi3_vec(i), &
                                                   dPhi5_vec(i)
            end do
        end if

        ! borra las matrices
        deallocate(H_impar)
        deallocate(E_impar)
        deallocate(work)

        ! Escribe las 7 primeras energias variacionales cuando N>=8
        jj = N  ! Variable auxiliar
        if (jj<=8) then
            write(2,' (i3.1, 100f15.5)') N, ( E(i), i=1,N ), &
                                         ( j*0., j=1,8-jj )
        else
            write(2,' (i3.1, 100f15.5)') N, ( E(i), i=1,8 )
        end if

        ! Array auxiliar (E_arr) que almacena cada valor de Wn(N) para un
        ! numero de funciones base N dado, de manera que
        !           W0(N1)  W1(N1)  ..
        ! E_arr =   W0(N2)  W1(N2)  ..
        !            :       :
        ! Uso este array para controlar el numero de funciones base para
        ! la convergencia de cada nivel
        j_arr = j_arr + 1
        do i=1, N, 1
            E_arr(j_arr, i) = E(i)
        end do

        ! Borra la ultima matriz
        deallocate(E)
    end do do_N

    ! Escribe el array E_arr
    do i=1, Nmax-1, 1
        write(4,'(1000f15.5)') ( E_arr(i,j), j=1, Nmax )
    end do

    ! Bucle para encontrar el numero de funciones base de convergencia
    do j=1, 16, 5
        do i=1, Nmax, 1
            ! E_sup = E_arr(i+5,1) ! Cambiar limite del DO de Nmax a Nmax-5
            E_sup = E_arr(Nmax-1,j)
            E_inf = E_arr(i,j)
            Delta_E = E_inf - E_sup
            if (abs(Delta_E)<=0.00001) then
                N_conver = i + 1
                E_conver = E_inf
                exit
            end if
        end do
        if (N_conver<Nmax) then
            write(3,'(i3.1, f15.5, i5.2)') j-1, E_conver, N_conver
        else
            write(3,'(i3.1, f15.5, "Aumentar Nmax")') j-1, E_conver
        end if
        ! Escribo los ficheros 7, 8, 9, 10
        if (j==1) then
            write(7,'(2x,"n =",i3.1,2x,"a =",f5.2,2x,"b =",f5.2,&
                      2x,"Nconverg. =",i3.1)') j, a, b, N_conver
            write(7, '(2x, "N", 8x, "W0")')
        elseif (j==6) then
            write(8,'(2x,"n =",i3.1,2x,"a =",f5.2,2x,"b =",f5.2,&
                      2x,"Nconverg. =",i3.1)') j, a, b, N_conver
            write(8, '(2x, "N", 8x, "W5")')
        elseif (j==11) then
            write(9,'(2x,"n =",i3.1,2x,"a =",f5.2,2x,"b =",f5.2,&
                      2x,"Nconverg. =",i3.1)') j, a, b, N_conver
            write(9, '(2x, "N", 8x, "W10")')
        elseif (j==16) then
            write(10,'(2x,"n =",i3.1,2x,"a =",f5.2,2x,"b =",f5.2,&
                      2x,"Nconverg. =",i3.1)') j, a, b, N_conver
            write(10,'(2x, "N", 8x, "W15")')
        end if
    end do

    ! Escribe n, W_n y Ncon. para los n=21 primeros niveles
    do j=1, 21, 1
        do i=1, Nmax, 1
            ! E_sup = E_arr(i+5,1) ! Cambiar limite del DO de Nmax a Nmax-5
            E_sup = E_arr(Nmax-1,j)
            E_inf = E_arr(i,j)
            Delta_E = E_inf - E_sup
            if (abs(Delta_E)<=0.00001) then
                N_conver = i + 1
                E_conver = E_inf
                exit
            end if
        end do
        if (N_conver<Nmax) then
            write(12,'(i3.1, f15.5, i5.2)') j-1, E_conver, N_conver
        else
            write(12,'(i3.1, f15.5, "Aumentar Nmax")') j-1, E_conver
        end if
    end do

    ! Escribe los valores de W0, W5, W10 y W15 en sus ficheros para N pares.
    ! Para N impares, cambiar el bucle DO.
    do N=2, Nmax, 2
        write(7,'  (i3.1, 100f15.5)') N, E_arr(N-1,1)
        if (N>=6) then
            write(8,'  (i3.1, 100f15.5)') N, E_arr(N-1,6)
        end if
        if (N>=11) then
            write(9,'  (i3.1, 100f15.5)') N, E_arr(N-1,11)
        end if
        if (N>=16) then
            write(10,' (i3.1, 100f15.5)') N, E_arr(N-1,16)
        end if
    end do

    ! Ficheros de E vs N
    write(11,'(2x, "a =", f5.2, 2x, "b =", f5.2)') a, b
    write(11,9997)
    do i=1, Nmax-1, 2
        write(11,'(i3.1, 1000f15.5)') i+1, ( E_arr(i,j), j=1, 21 )
    end do

    deallocate(E_arr)

    close(2)
    close(3)
    close(4)
    close(7)
    close(8)
    close(9)
    close(10)
    close(11)
    close(12)
    close(20)
    close(21)

    write(*,*) 'El programa ha finalizado'

    stop
endprogram osc_doble_pozo
