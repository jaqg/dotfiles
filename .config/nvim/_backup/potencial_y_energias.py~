# _____________________________________________________________________________
# *****************************************************************************
# Autor: José Antonio Quiñonero gris
# Fecha de creación: 12 de abril de 2022
# *****************************************************************************
# -----------------------------------------------------------------------------

# descripcion del programa

# Librerias
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('mine')

# *****************************************************************************
# INICIO
# *****************************************************************************


fichero_datos_1 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/in-osc_doble_pozo.dat'
fichero_datos_2 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/in-potencial.dat'
N, a, b = np.loadtxt(fichero_datos_1, unpack=True, skiprows=1)
xmin, xmax, dx = np.loadtxt(fichero_datos_2, unpack=True, skiprows=1)

def Vb(a,b):
    res = b**2/(4*a)
    return res

def x1(n,a,b):
    res = np.sqrt(np.sqrt(b**2-4*Vb(a,b)*a+4*E[n]*a)/a+b/a)/np.sqrt(2)
    return res
def x2(n,a,b):
    res = np.sqrt(b/a-np.sqrt(b**2-4*Vb(a,b)*a+4*E[n]*a)/a)/np.sqrt(2)
    return res

# GRAFICA
nombre_grafica = 'potencial_y_energias.pdf'

xmin = -3
xmax = 3
ymin = 0
ymax = 7

width  = 7.2
height = 2*width

fig = plt.figure(figsize=(width, height))
axs = fig.add_gridspec(4,4)
ax1 = fig.add_subplot(axs[0, 0:2])
ax2 = fig.add_subplot(axs[0, 2:4])
ax3 = fig.add_subplot(axs[1, 1:3])
# ax4 = fig.add_subplot(axs[0, 1])

# --- b = 1 ---
b=1.0
ax = ax1
fichero_potencial = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-potencial_b=1.dat'
fichero_energias = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-conver_energias_b=1.dat'
x, V = np.loadtxt(fichero_potencial, unpack=True, skiprows=3)
n, E, Nconver = np.loadtxt(fichero_energias, unpack=True, skiprows=1)

ax.plot(x, V, label=r'$V\,(x)$', color='grey')

# Por debajo de la barrera
if b==1:
    n_barrera = 0
elif b==2:
    n_barrera = 1
elif b==4:
    n_barrera = 2

for i in np.arange(0,n_barrera):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
    ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

# Por encima de la barrera
for i in np.arange(n_barrera,len(E)):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set(title=r'$V\,(x;a={},b={})$'.format(a,b), xlabel=r'$x\ (a_0)$', ylabel=r'$E\ (\mathrm{Ha})$')

ax.text(x1(0,a,b)+0.4, E[0], '$v=0$', horizontalalignment='center', verticalalignment='center')
ax.text(x1(1,a,b)+0.4, E[1], '$v=1$', horizontalalignment='center', verticalalignment='center')
ax.text(x1(2,a,b)+0.4, E[2], '$v=2$', horizontalalignment='center', verticalalignment='center')
ax.text(x1(3,a,b)+0.4, E[3], '$v=3$', horizontalalignment='center', verticalalignment='center')

# handles, labels = ax.get_legend_handles_labels()
# axs[1].legend(handles[::-1], labels[::-1], loc=(1.01,0.4))
ax.legend(loc='upper right')

# --- b = 2 ---
b=2.0
ax = ax2
fichero_potencial = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-potencial_b=2.dat'
fichero_energias = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-conver_energias_b=2.dat'
x, V = np.loadtxt(fichero_potencial, unpack=True, skiprows=3)
n, E, Nconver = np.loadtxt(fichero_energias, unpack=True, skiprows=1)

ax.plot(x, V, label=r'$V\,(x)$', color='grey')

# Por debajo de la barrera
if b==1:
    n_barrera = 0
elif b==2:
    n_barrera = 1
elif b==4:
    n_barrera = 2

for i in np.arange(0,n_barrera):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
    ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

# Por encima de la barrera
for i in np.arange(n_barrera,len(E)):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set(title=r'$V\,(x;a={},b={})$'.format(a,b), xlabel=r'$x\ (a_0)$', ylabel=r'$E\ (\mathrm{Ha})$')

ax.text(x1(0,a,b)+0.4, E[0], '$v=0$', horizontalalignment='center', verticalalignment='center')
ax.text(x1(1,a,b)+0.4, E[1], '$v=1$', horizontalalignment='center', verticalalignment='center')
ax.text(x1(2,a,b)+0.4, E[2], '$v=2$', horizontalalignment='center', verticalalignment='center')
ax.text(x1(3,a,b)+0.4, E[3], '$v=3$', horizontalalignment='center', verticalalignment='center')

# handles, labels = ax.get_legend_handles_labels()
# axs[1].legend(handles[::-1], labels[::-1], loc=(1.01,0.4))
ax.legend(loc='upper right')

# --- b = 4 ---
b=4.0
ax = ax3
fichero_potencial = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-potencial_b=4.dat'
fichero_energias = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-conver_energias_b=4.dat'
x, V = np.loadtxt(fichero_potencial, unpack=True, skiprows=3)
n, E, Nconver = np.loadtxt(fichero_energias, unpack=True, skiprows=1)

ax.plot(x, V, label=r'$V\,(x)$', color='grey')

# Por debajo de la barrera
if b==1:
    n_barrera = 0
elif b==2:
    n_barrera = 1
elif b==4:
    n_barrera = 2

for i in np.arange(0,n_barrera):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
    ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

# Por encima de la barrera
for i in np.arange(n_barrera,len(E)):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set(title=r'$V\,(x;a={},b={})$'.format(a,b), xlabel=r'$x\ (a_0)$', ylabel=r'$E\ (\mathrm{Ha})$')

ax.text(x1(0,a,b)+0.5, E[0]-0.1, '$v=0$', horizontalalignment='center', verticalalignment='center')
ax.text(x1(1,a,b)+0.5, E[1]+0.1, '$v=1$', horizontalalignment='center', verticalalignment='center')
ax.text(x1(2,a,b)+0.4, E[2], '$v=2$', horizontalalignment='center', verticalalignment='center')
ax.text(x1(3,a,b)+0.4, E[3], '$v=3$', horizontalalignment='center', verticalalignment='center')

# handles, labels = ax.get_legend_handles_labels()
# axs[1].legend(handles[::-1], labels[::-1], loc=(1.01,0.4))
ax.legend(loc='upper right')


plt.savefig(nombre_grafica, transparent='True', bbox_inches='tight')
# plt.show()
