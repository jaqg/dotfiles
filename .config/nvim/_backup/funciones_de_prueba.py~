# _____________________________________________________________________________
# *****************************************************************************
# Autor: José Antonio Quiñonero gris
# Fecha de creación: 12 de abril de 2022
# *****************************************************************************
# -----------------------------------------------------------------------------

# descripcion del programa

# Librerias
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('mine')

# *****************************************************************************
# INICIO
# *****************************************************************************


fichero_datos_1 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/in-osc_doble_pozo.dat'
fichero_datos_2 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/in-potencial.dat'
fichero_potencial = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-potencial.dat'
fichero_energias = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-conver_energias.dat'
fichero_funciones_pares = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-funciones_pares.dat'
fichero_funciones_impares = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_2/data/out-funciones_impares.dat'

N, a, b = np.loadtxt(fichero_datos_1, unpack=True, skiprows=1)
xmin, xmax, dx = np.loadtxt(fichero_datos_2, unpack=True, skiprows=1)
x, V = np.loadtxt(fichero_potencial, unpack=True, skiprows=3)
n, E, Nconver = np.loadtxt(fichero_energias, unpack=True, skiprows=1)
x, Phi0, Phi2, Phi4 = np.loadtxt(fichero_funciones_pares, unpack=True, skiprows=3)
x, Phi1, Phi3, Phi5 = np.loadtxt(fichero_funciones_impares, unpack=True, skiprows=3)

def Vb(a,b):
    res = b**2/(4*a)
    return res

def x1(n,a,b):
    res = np.sqrt(np.sqrt(b**2-4*Vb(a,b)*a+4*E[n]*a)/a+b/a)/np.sqrt(2)
    return res
def x2(n,a,b):
    res = np.sqrt(b/a-np.sqrt(b**2-4*Vb(a,b)*a+4*E[n]*a)/a)/np.sqrt(2)
    return res

# GRAFICA
nombre_grafica = 'funciones_prueba_b={}.pdf'.format(b)
print('b={}'.format(b))

if b==10:
    xmin = -5
    xmax = 5
    ymin = 0
    ymax = Vb(a,b)+Vb(a,b)/10
if b==4:
    xmin = -4
    xmax = 4
    ymin = 0
    ymax = 7
else:
    xmin = -3
    xmax = 3
    ymin = 0
    ymax = 7

# Por debajo de la barrera
if b==1:
    n_barrera = 0
elif b==2:
    n_barrera = 1
elif b==3:
    n_barrera = 2
elif b==4:
    n_barrera = 2
elif b==5:
    n_barrera = 4
elif b==10:
    n_barrera = 4

# width as measured in inkscape
# width = 15.922
width = 7.2
# height = width / 1.618
height = 4.45

fig, ax = plt.subplots(figsize=(width, height), sharey=True)

ax.plot(x, V, color='grey')

ax.plot(x, Phi0, label=r'$\left| \Phi_0 \right>$')
ax.plot(x, Phi1, label=r'$\left| \Phi_1 \right>$')
ax.plot(x, Phi2, label=r'$\left| \Phi_2 \right>$')
ax.plot(x, Phi3, label=r'$\left| \Phi_3 \right>$')
# ax.plot(x, Phi4, label=r'$\left| \Phi_4 \right>$')
# ax.plot(x, Phi5, label=r'$\left| \Phi_5 \right>$')

for i in np.arange(0,n_barrera):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
    ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

# Por encima de la barrera
for i in np.arange(n_barrera,len(E)):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set(xlabel=r'$x\ (a_0)$', ylabel=r'$E\ (\mathrm{Ha})$')

# handles, labels = ax.get_legend_handles_labels()
# axs[1].legend(handles[::-1], labels[::-1], loc=(1.01,0.4))
ax.legend(loc='lower left')

plt.savefig(nombre_grafica, transparent='True', bbox_inches='tight')
# plt.show()
