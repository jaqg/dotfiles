# ____________________________________________________________________________
# *****************************************************************************
# Autor: José Antonio Quiñonero gris
# Fecha de creación: 3 de marzo de 2022
# *****************************************************************************
# -----------------------------------------------------------------------------

# Grafica para el oscilador con una perturbacion cuartica

# Librerias
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

plt.style.use('mine')

# line cyclers adapted to colourblind people
from cycler import cycler
line_cycler   = (cycler(color=["#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7", "#F0E442"]) +
                 cycler(linestyle=["-", "--", "-.", ":", "-", "--", "-."]))
marker_cycler = (cycler(color=["#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7", "#F0E442"]) +
                 cycler(linestyle=["none", "none", "none", "none", "none", "none", "none"]) +
                 cycler(marker=["4", "2", "3", "1", "+", "x", "."]))
marker_line_cycler = (cycler(color=["#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7", "#F0E442"]) +
                      cycler(linestyle=["-", "-", "-", "-", "-", "-", "-"]) +
                      cycler(marker=["o", "^", "s", "v", "o", "^", "s"]))

plt.rc("axes", prop_cycle=marker_line_cycler)
# Para un solo axes
#ax.set_prop_cycle(line_cycler)

# *****************************************************************************
# INICIO
# *****************************************************************************

# Creacion del dataframe
archivo_datos = '../data/in-osc_doble_pozo.dat'

Ntot, a, b = np.loadtxt(archivo_datos, unpack=True, skiprows=1)

# Grafico
nombre_grafica = 'convergencia_energias.pdf'

width=15.922
height = 4.45

fig = plt.figure(figsize=(7.2,7.2*2))
axs = fig.add_gridspec(4,4)
ax1 = fig.add_subplot(axs[0, 0:2])
ax2 = fig.add_subplot(axs[0, 2:4])
ax3 = fig.add_subplot(axs[1, 1:3])
# ax4 = fig.add_subplot(axs[0, 1])

grosor=1.2

for i in np.arange(0,3):
    if i==0:
        archivo_energias = '../data/out-energias_b=1.dat'
        ax = ax1
    elif i==1:
        archivo_energias = '../data/out-energias_b=2.dat'
        ax = ax2
    elif i==2:
        archivo_energias = '../data/out-energias_b=4.dat'
        ax = ax3

    N, W0, W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18, W19, W20 = np.loadtxt(archivo_energias, unpack=True, skiprows=2)
    Nmax = 25
    ax.plot(N[0:Nmax],   W0[0:Nmax],  lw=grosor, label=r'$W_0$'      )
    #ax.plot(N[0:Nmax],   W1[0:Nmax],  lw=grosor, label=r'$W_1$'      )
    ax.plot(N[1:Nmax],   W2[1:Nmax],  lw=grosor, label=r'$W_2$'      )
    #ax.plot(N[1:Nmax],   W3[1:Nmax],  lw=grosor, label=r'$W_3$'      )
    ax.plot(N[2:Nmax],   W4[2:Nmax],  lw=grosor, label=r'$W_4$'      )
    #ax.plot(N[2:Nmax],   W5[2:Nmax],  lw=grosor, label=r'$W_5$'      )
    ax.plot(N[3:Nmax],   W6[3:Nmax],  lw=grosor, label=r'$W_6$'      )
    #ax.plot(N[3:Nmax],   W7[3:Nmax],  lw=grosor, label=r'$W_7$'      )
    ax.plot(N[4:Nmax],   W8[4:Nmax],  lw=grosor, label=r'$W_8$'      )
    #ax.plot(N[4:Nmax],   W9[4:Nmax],  lw=grosor, label=r'$W_9$'      )
    ax.plot(N[5:Nmax],  W10[5:Nmax],  lw=grosor, label=r'$W_{10}$'   )
    #ax.plot(N[5:Nmax],  W11[5:Nmax],  lw=grosor, label=r'$W_{11}$'   )
    ax.plot(N[6:Nmax],  W12[6:Nmax],  lw=grosor, label=r'$W_{12}$'   )
    #ax.plot(N[6:Nmax],  W13[6:Nmax],  lw=grosor, label=r'$W_{13}$'   )
    ax.plot(N[7:Nmax],  W14[7:Nmax],  lw=grosor, label=r'$W_{14}$'   )
    #ax.plot(N[7:Nmax],  W15[7:Nmax],  lw=grosor, label=r'$W_{15}$'   )
    ax.plot(N[8:Nmax],  W16[8:Nmax],  lw=grosor, label=r'$W_{16}$'   )
    #ax.plot(N[8:Nmax],  W17[8:Nmax],  lw=grosor, label=r'$W_{17}$'   )
    ax.plot(N[9:Nmax],  W18[9:Nmax],  lw=grosor, label=r'$W_{18}$'   )
    #ax.plot(N[9:Nmax],  W19[9:Nmax],  lw=grosor, label=r'$W_{19}$'   )
    ax.plot(N[10:Nmax], W20[10:Nmax], lw=grosor, label=r'$W_{20}$'   )
    #
    ax.set_xlim(0,2*Nmax)
    # ax.set_ylim(-5,max(W20)+max(W20)/20)
    # ax.set_ylim(min(W0)-(max(W20)-min(W0))/10,max(W20)+(max(W20)-min(W0))/10)
    ax.set_ylim(min(W0)-(max(W20)-min(W0))/10,350)
    #
    if i==0:
        ax.set(title=r'$b=1.0$',xlabel=r'$N$', ylabel=r'$E$ (Ha)')
    elif i==1:
        ax.set(title=r'$b=2.0$',xlabel=r'$N$', ylabel=r'$E$ (Ha)')
    elif i==2:
        ax.set(title=r'$b=4.0$',xlabel=r'$N$', ylabel=r'$E$ (Ha)')
        handles, labels = ax.get_legend_handles_labels()
        ax.legend(handles[::-1], labels[::-1], loc=(1.02,0.03))

# ax.text(0.9,0.95, r'$d=0.1$', horizontalalignment='center', verticalalignment='center', transform=ax.transAxes, bbox=dict(facecolor='none'))

plt.savefig(nombre_grafica, transparent='True', bbox_inches='tight')
# plt.show()
