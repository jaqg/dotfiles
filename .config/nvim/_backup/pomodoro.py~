#!/usr/bin/env python

# Modificacion del codigo del usuario veggiedefender para el programa tty-countdown
# https://github.com/veggiedefender/tty-countdown
# para hacer un timer tipo pomodoro

# Fecha de creación: 13 de Enero de 2022
# Autor: José Antonio Quiñonero Gris

# Las modificaciones del codigo original (de veggiedefender) llevadas a cabo por mi
# seran comentadas

import subprocess
import argparse
import time
import datetime
from os.path import exists
import csv
from tabulate import tabulate

# Default dimensions just in case
DEFAULT_HEIGHT = 24
DEFAULT_WIDTH = 80

# Arguments
# Modificacion de la descripcion
parser = argparse.ArgumentParser(description="Temporizador simple tipo pomodoro para la terminal")

# Añado un argumento para el numero de ciclos que se quiere repetir el timer
# El resto de argumentos se mantienen igual
#parser.add_argument("-m", "--minutes", action="store",
#                    type=int, help="Number of minutes",
#                    default=0)
#parser.add_argument("-s", "--seconds", action="store",
#                    type=int, help="Number of seconds",
#                    default=0)
parser.add_argument("-w", "--work_time", action="store",
                    help="Time of work (e.g. 1h, 25m, 50s) [default 50m]",
                    default="50m")
parser.add_argument("-r", "--relax_time", action="store",
                    help="Time of relax (e.g. 1h, 25m, 50s) [default 10m]",
                    default="10m")
# parser.add_argument("-w", "--work_time", action="store",
#                     type=int, help="Time of work (e.g. 1h, 25m, 50s)",
#                     default=0)
# parser.add_argument("-r", "--relax_time", action="store",
#                     type=int, help="Time of work (e.g. 1h, 25m, 50s)",
#                     default=0)
parser.add_argument("-c", "--cicles", action="store",
                    type=int, help="Number of cicles",
                    default=0)
parser.add_argument("-j", "--job", action="store",
                    help="Name of the job",
                    default="test")
parser.add_argument("-f", "--font", action="store",
                    help="Custom font file",
                    default="/usr/share/tty-countdown/font.txt")
parser.add_argument("-n", "--nocenter", action="store_true",
                    help="Do not center timer (more efficient)")

args = parser.parse_args()

centered = not args.nocenter
#seconds = args.seconds
#minutes = args.minutes
work_time = args.work_time
relax_time = args.relax_time
cicles = args.cicles - 1
job = args.job
fontFile = args.font

# Tiempo de trabajo
if "h" in "{}".format(work_time):
    work_hours = int(work_time[0:-1])
    work_seconds  = work_hours * 60 * 60
elif "m" in "{}".format(work_time):
    work_minutes = int(work_time[0:-1])
    work_seconds  = work_minutes  * 60
elif "s" in "{}".format(work_time):
    work_seconds = int(work_time[0:-1])

# max_long_job = 39   # max long ofjob so that max characters in line is 80
# if len(job)<=max_long_job:
#     job = job + " "*(max_long_job-len(job))
# else:
#     job = job[0:-(len(job)-max_long_job)]

# Tiempo de relax
if "h" in "{}".format(relax_time):
    relax_hours = int(relax_time[0:-1])
    relax_seconds  = relax_hours * 60 * 60
elif "m" in "{}".format(relax_time):
    relax_minutes = int(relax_time[0:-1])
    relax_seconds  = relax_minutes  * 60
elif "s" in "{}".format(relax_time):
    relax_seconds = int(relax_time[0:-1])

# Turn string into blocky ascii representation
# Supports 0-9, colon
def asciiFormat(string, font):
    # enumerate numbers and colons
    string = list(map(int, [c.replace(":", "10") for c in list(string)]))
    height = len(font[0])

    frame = ""
    # fill frame top to bottom
    for i in range(height):
        for char in string[:-1]:
            frame += font[char][i] + " "
        # dirty hack to have no space at the end
        frame += font[string[-1]][i]

        frame += "\n"
    return frame[:-1]


# Pad with spaces and newlines to center
def center(frame, termDimensions):
    if centered:
        termHeight = termDimensions[0]
        termWidth = termDimensions[1]
        frame = frame.split("\n")
        frameWidth = max(map(len, frame))
        frameHeight = len(frame)
        # pad horizontally
        pad = " " * int((termWidth - frameWidth) / 2)
        frame = "\n".join([(pad + line + pad) for line in frame])

        # pad vertically
        pad = "\n" * int((termHeight - frameHeight) / 2)
        frame = pad + frame + pad
    clear()
    return frame


# Clear screen
def clear():
    # no idea how this works but it does
    print("\033c")


# Terminal dimensions [height, width]
def getTermDimensions():
    try:
        dimensions = subprocess.check_output(['stty', 'size']).split()
        return list(map(int, dimensions))
    except subprocess.CalledProcessError:
        return [DEFAULT_HEIGHT, DEFAULT_WIDTH]

if __name__ == '__main__':
    # Load font file
    with open(fontFile, "r") as f:
        # font = f.read().split("\n<---->\n")
        font = f.read().split("\n<->\n")
        font = [symbol.split("\n") for symbol in font]

    # Hago uso de dunst para enviar notificaciones
    icono='/home/jose/.config/dunst/sand_clock_3_white.png'     # Icono de la notificacion
    # Funcion para correr comandos en shell
    def sh_command(cmd):
        subprocess.Popen(cmd, shell=True, executable='/bin/sh')

    # Loop principal
    total_seconds = 0
    number_cicles = 0
    while number_cicles <= cicles:
        seconds_cicle = work_seconds
        # Al empezar, manda la notificacion con dunst
        sh_command('dunstify -u normal -I {} "¡A trabajar! ({}/{})" '.format(icono, number_cicles, cicles))
        # Cuentra atras del tiempo de trabajo
        while seconds_cicle >= 0:
            t = "%s:%02d" % divmod(seconds_cicle, 60)
            print("Trabajo", "{}/{}".format(number_cicles, cicles), center(asciiFormat(t, font), getTermDimensions()), end="")
            seconds_cicle -= 1
            total_seconds += 1
            time.sleep(1)
        # Al terminar, manda la notificacion con dunst
        sh_command('dunstify -u normal -I {} "¡Descanso! ({}/{})" '.format(icono, number_cicles, cicles))
        # Al terminar la cuenta atras del trabajo debe empezar una cuenta atras para el descanso
        seconds_cicle = relax_seconds
        while seconds_cicle >= 0:
            t = "%s:%02d" % divmod(seconds_cicle, 60)
            print("Descanso", "{}/{}".format(number_cicles, cicles), center(asciiFormat(t, font), getTermDimensions()), end="")
            seconds_cicle -= 1
            total_seconds += 1
            time.sleep(1)
        # Al terminar ambas cuentas atras, se completa un ciclo y se itera el bucle
        number_cicles += 1

    # Escribir el tiempo de estudio en un fichero externo
    total_minutes = total_seconds/60
    total_hours = total_minutes/60
    # Variables sobre la fecha necesarias para los ficheros
    current_date = datetime.date.today()                    # Extrae la fecha actual
    current_year = current_date.year                        # Extract current year only
    current_month = current_date.strftime("%B")             # Extract current month only
    current_day = current_date.day                          # Extract current day only
    date_time = datetime.datetime.now()                     # Extrae la fecha actual
    current_time = date_time.strftime("%H:%M")              # Formato de la hora actual
    complete_date = date_time.strftime("%d-%m-%y %H:%M")    # Fecha completa

    # Dia = current_day
    # Hora = current_time
    # Tarea = job
    # Numero de ciclos completados = number_cicles
    # Tiempo de estuio total (minutos) = total_seconds/60
    # Horas de estudio = total_seconds/(60*60)

    # Nombre del fichero: Mes_Año.txt
    file_path = "/home/jose/Documents/Pomodoro/"
    # file_path = "/home/jose/Documents/Pomodoro/pruebas/"
    # file_name = "{}_{}.txt".format(current_month, current_year)
    file_name = "{}_{}.csv".format(current_month, current_year)

    # Comprueba si ya existe el fichero: True/False
    file_exists = exists("{}{}".format(file_path, file_name))

    # datos = ["{}\t".format(complete_date), "{}\t".format(current_day),
    #                 "{}\t".format(current_time), "{}\t".format(job), "{}\t".format(number_cicles),
    #                 "{:.2f}\t".format(total_minutes), "{:.2f}\n".format(total_hours)]
    datos = ["{}\t".format(current_day), " ",
             "{}\t".format(current_time), " ",
             "{}\t".format(job), " ",
             "{}\t".format(number_cicles), " ",
             "{:.2f}\t".format(total_minutes), " ",
             "{:.2f}\n".format(total_hours)]

    # datos2 = ["{}".format(current_day),
    #           "{}".format(current_time),
    #           "{}".format(job),
    #           "{}".format(number_cicles) + " "*(6-len(str(number_cicles))),
    #           "{:.2f}".format(total_minutes) + " "*(9-len("{:.2f}".format(total_minutes))),
    #           "{:.2f}".format(total_hours)]

    datos3 = ["{}".format(current_day),
              "{}".format(current_time),
              "{}".format(number_cicles),
              "{:.2f}".format(total_minutes),
              "{:.2f}".format(total_hours),
              "{}".format(job)]


    fila_1 = ["Día\t",
              "Hora\t",
              "Tarea\t",
              "Ciclos\t",
              "Tiempo(min)\t",
              "Tiempo(h)\n"]

    # fila_1 = ["Día\t",         " "*len(str(current_day)),
    #           "Hora\t",        " "*len(current_time),
    #           "Tarea\t",       " "*len(job),
    #           "Ciclos\t",      " "*len(str(number_cicles)),
    #           "Tiempo(min)\t", " "*len(str(total_minutes)),
    #           "Tiempo(h)\n"]

    # fila_1_2 = ["Day", "Hour", "Job"+" "*(max_long_job-3), "Cicles", "Time(min)", "Time(h)"]

    fila_1_3 = ["Day", "Hour", "Cicles", "Time(min)", "Time(h)", "Job"]

    # Abre el fichero y, si no existe, crealo
    with open("{}{}".format(file_path, file_name),"a+") as f:
        writer = csv.writer(f, delimiter='\t')
        # Si el fichero no existe, escribe la primera linea de la tabla y los datos
        if file_exists == False:
            # f.write(tabulate([fila_1_2, datos2])
            # f.writelines(datos)
            # writer.writerows(fila_1_2)
            # writer.writerows([fila_1_2])
            # writer.writerows([datos2])
            # writer.writerows([fila_1_2, datos2])
            writer.writerow(["-"*80])
            # writer.writerows([fila_1_2])
            writer.writerows([fila_1_3])
            writer.writerow(["-"*80])
            # writer.writerows([datos2])
            writer.writerows([datos3])

        # En caso de que el fichero ya exista, escribe solo los datos
        else:
            # f.writelines(datos)
            # f.write(tabulate([datos2])
            # writer.writerows([datos2])
            writer.writerows([datos3])
            # f.write("{}\t{}\t{}\t{}\t{}\t{}\t{}".format(complete_date, current_day, current_time,
            #     job, number_cicles, total_minutes, total_hours))
