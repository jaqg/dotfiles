module probabilidad_supervivencia_general
    implicit none
    contains
        ! Subrutina para el cálculo de la probabilidad de supervivencia
        subroutine probabilidad_supervivencia(c_i, E_wp, t, EHAJ, HP, pi, Ps)
            implicit none
            COMMON hbar,m
            real*8, dimension(:), intent(in) :: c_i
            real*8, dimension(:), intent(in) :: E_wp
            real*8, intent(in) :: t, EHAJ, HP, pi
            real*8, intent(out) :: Ps
            integer :: i, j, numero_func
            real*8 :: hbar, m, t_s, E0, E1, a_i, a_j


            write(*,*) 'size(c_i) =', size(c_i)
            write(*,*) 'size(E) =', size(E_wp)
            write(*,*) 'c_i(1) =', c_i(1)
            write(*,*) 'c_i(2) =', c_i(2)
            write(*,*) 'E(1) =', E_wp(1)
            write(*,*) 'E(2) =', E_wp(2)
            write(*,*) 't =', t
            write(*,*) 'EHAJ =', EHAJ
            write(*,*) 'HP =', HP
            write(*,*) 'pi =', pi

            hbar = HP/(2.d0*pi)     ! J·s
            t_s = t*1.d-12          ! Tiempo en segundos <- picosegundos
            numero_func = size(c_i)
            write(*,*) 'hbar =', hbar
            write(*,*) 't_s =', t_s
            write(*,*) 'numero_func =', numero_func

            Ps = 0.d0
            do i=1, numero_func, 1
                do j=i+1, numero_func, 1
                    E0 = E_wp(i) * EHAJ          ! Energia del nivel v=1 en Ha
                    E1 = E_wp(j) * EHAJ          ! Energia del nivel v=1 en Ha
                    a_i = c_i(i)
                    a_j = c_i(j)
                    Ps = Ps + abs(a_i)**2 * abs(a_j)**2 * cos((E1-E0)*t_s/hbar)
                end do
            end do
            Ps = 2.d0 * Ps
            do i=1, numero_func, 1
                a_i = c_i(i)
                Ps = Ps + abs(a_i)**4
            end do

            return
        end subroutine probabilidad_supervivencia
end module
