# _____________________________________________________________________________
# *****************************************************************************
# Autor: José Antonio Quiñonero Gris
# Fecha de creación: 7 de febrero de 2022
# *****************************************************************************
# -----------------------------------------------------------------------------

# Animaciones de la particula en una caja unidimensional, bidimensional y
# tridimensional

# Librerias
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import axes3d
import matplotlib.animation as animation
from matplotlib import cm
from math import factorial
from scipy.special import hermite

# Usar mi estilo para las graficas
plt.style.use('mine')

# *****************************************************************************
# INICIO
# *****************************************************************************

path_to_data = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo/data/in-osc_doble_pozo.dat'
numero_total_funciones_base, a, d1, d2, d3 = np.loadtxt(path_to_data, unpack=True, skiprows=1)

# Archivos
path_to_file_1 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo/data/out-energias_variacionales_graf.dat'
d_vals, N, W0, W1, W2, W3, W4, W5, W6, W7 = np.loadtxt(path_to_file_1, unpack=True, skiprows=1)
path_to_file_2 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo/data/out-parametros_variacionales_2.dat'
d_vals_c, c0, c1, c2, c3, c4, c5 = np.loadtxt(path_to_file_2, unpack=True, skiprows=1)

# Numero de funciones base
num_func_base = 10
d_ind = 0

# -- Definicion de constantes --
# Realizo el calculo en unidades atomicas, por lo que
hbar = 1                       # Constante de Planck reducida
m = 1                          # Masa de la particula
k = 1                          # Constante de fuerza
omega = np.sqrt(k/m)           # Momento angular: omega = (k/m)^(1/2)

# -- Definicion de las funciones --
# Funcion potencial
def V(x,d):
    return a * x**2 + d * x**4

# Valores propios de la energia
def E(n):
    return (n + 1/2) * hbar * omega

# Definicion de una constante 'alpha' para simplificar la formulacion
alpha = m * omega/hbar

# Variable de desplazamiento xi
def xi(x):
    return np.sqrt(alpha) * x

# Constante de normalizacion
def N(n):
    return ( np.sqrt(alpha/np.pi) * (1/(2**n * factorial(n))) )**(1/2)

# Funcion exponencial a diferenciar
def diff_expo(x):
    return np.exp(-xi(x)**2)

# Funcion exponencial
def expo(x):
    return np.exp(-(xi(x)**2)/2)

# Polinomios de Hermite
def Hv(n,x):
    herm = hermite(n)
    P_v = herm(x)
    return P_v

# Componente temporal de funciones
def time_expo(n,t):
    return np.exp(-1j * E(n) * t/hbar)

# Funciones propias
def phi(n,x,t):
    return N(n) * expo(x) * Hv(n,x) * time_expo(n,t)

# Densidad de probabilidad
def dens_phi(n,x,t):
    return np.conj(phi(n,x,t)) * phi(n,x,t)

def psi_0(x,t):
    res_psi = 0
    for i in np.arange(0,num_func_base):
        coef_ind = i + (num_func_base * d_ind)
        res_psi = c0[coef_ind] * phi(i,x,t) + res_psi
    res_psi = res_psi + W0[d_ind]
    return res_psi
def dens_psi_0(x,t):
    return np.conj(psi_0(x,t)-W0[d_ind]) * (psi_0(x,t)-W0[d_ind]) + W0[d_ind]

def psi_1(x,t):
    res_psi = 0
    for i in np.arange(0,num_func_base):
        coef_ind = i + (num_func_base * d_ind)
        res_psi = c1[coef_ind] * phi(i,x,t) + res_psi
    res_psi = res_psi + W1[d_ind]
    return res_psi
def dens_psi_1(x,t):
    return np.conj(psi_1(x,t)-W1[d_ind]) * (psi_1(x,t)-W1[d_ind]) + W1[d_ind]

def psi_2(x,t):
    res_psi = 0
    for i in np.arange(0,num_func_base):
        coef_ind = i + (num_func_base * d_ind)
        res_psi = c2[coef_ind] * phi(i,x,t) + res_psi
    res_psi = res_psi + W2[d_ind]
    return res_psi
def dens_psi_2(x,t):
    return np.conj(psi_2(x,t)-W2[d_ind]) * (psi_2(x,t)-W2[d_ind]) + W2[d_ind]

def psi_3(x,t):
    res_psi = 0
    for i in np.arange(0,num_func_base):
        coef_ind = i + (num_func_base * d_ind)
        res_psi = c3[coef_ind] * phi(i,x,t) + res_psi
    res_psi = res_psi + W3[d_ind]
    return res_psi
def dens_psi_3(x,t):
    return np.conj(psi_3(x,t)-W3[d_ind]) * (psi_3(x,t)-W3[d_ind]) + W3[d_ind]

def psi_4(x,t):
    res_psi = 0
    for i in np.arange(0,num_func_base):
        coef_ind = i + (num_func_base * d_ind)
        res_psi = c4[coef_ind] * phi(i,x,t) + res_psi
    res_psi = res_psi + W4[d_ind]
    return res_psi
def dens_psi_4(x,t):
    return np.conj(psi_4(x,t)-W4[d_ind]) * (psi_4(x,t)-W4[d_ind]) + W4[d_ind]

def psi_5(x,t):
    res_psi = 0
    for i in np.arange(0,num_func_base):
        coef_ind = i + (num_func_base * d_ind)
        res_psi = c5[coef_ind] * phi(i,x,t) + res_psi
    res_psi = res_psi + W5[d_ind]
    return res_psi
def dens_psi_5(x,t):
    return np.conj(psi_5(x,t)-W5[d_ind]) * (psi_5(x,t)-W5[d_ind]) + W5[d_ind]


# TODO
# def psi(j,x,t):
#     res_psi = 0
#     for i in np.arange(0,num_func_base+1):
#         res_psi =  res_psi + ( c_j[i] * phi(i,x,t) )
#     res_psi = res_psi + E[j]
#     return res_psi
# def dens_psi(j,x,t):
#     res_dpsi = np.conj(psi(j,x,t)-E[j]) * (psi(j,x,t)-E[j])
#     res_dpsi = res_dpsi + E[j]
#     return res_dpsi


# def psi_1(x,t):
#     return c01 * phi(0,x,t) + c11 * phi(1,x,t) + c21 * phi(2,x,t) + W1

# def dens_psi_1(x,t):
#     return np.conj(psi_1(x,t)-W1) * (psi_1(x,t)-W1) + W1

# def psi_2(x,t):
#     return c02 * phi(0,x,t) + c12 * phi(1,x,t) + c22 * phi(2,x,t) + W2

# def dens_psi_2(x,t):
    # return np.conj(psi_2(x,t)-W2) * (psi_2(x,t)-W2) + W2

# -----------------------------------------------------------------------------
# Datos
# -----------------------------------------------------------------------------

x = np.linspace(-10, 10, 300)
t0 = 0
dt = 1/30
nu = 1/(2 * np.pi) * np.sqrt(k/m)
T = 1/nu
T_frames = round(T/dt)

numero_frames = 3 * T_frames

# -----------------------------------------------------------------------------
# Animacion 1
# -----------------------------------------------------------------------------
# Coeficientes de la combinacion lineal
# C0 = np.sqrt(1/12)
# C1 = np.sqrt(1/12)
# C2 = 0
# energia = C0*W0 + C1*W1 + C2*W2

# Creacion de la grafica
fig = plt.figure()
plt.axes()
ax = fig.gca()
# Creating color map
# my_cmap = plt.get_cmap('bone_r')
# Barra de color

# Funcion actualizar
def actualizar(i):
    t = t0 + (dt * i)
    coef = 1/(np.sqrt(2))
    y = coef * psi_0(x,t).real + coef * psi_0(x,t).real
    energia = coef * W0[d_ind] + coef * W1[d_ind]
    # y1  = psi_0(x,t).real
    # y2  = dens_psi_0(x,t).real
    # y3  = psi_1(x,t).real
    # y4  = dens_psi_1(x,t).real
    # y5  = psi_2(x,t).real
    # y6  = dens_psi_2(x,t).real
    # y7  = psi_3(x,t).real
    # y8  = dens_psi_3(x,t).real
    # y9  = psi_4(x,t).real
    # y10 = dens_psi_4(x,t).real
    # y11 = psi_5(x,t).real
    # y12 = dens_psi_5(x,t).real
    # y2 = dens_psi_1(x,t).real
    # y3 = dens_psi_2(x,t).real
    # y4 = dens_psi_3(x,t).real
    # y5 = dens_psi_4(x,t).real
    # y6 = dens_psi_5(x,t).real
    ax.clear()
    # ax.axvline(x=0, lw=0.5,color='gray')
    ax.axhline(y=energia,label=r'$E = {:.5f}$'.format(energia),lw=1,color='black')
    # ax.axhline(y=W0[d_ind],label=r'$W_0 = {:.5f}$'.format(W0[d_ind]),lw=1,color='black')
    # ax.axhline(y=W1[d_ind],label=r'$W_1 = {:.5f}$'.format(W1[d_ind]),lw=1,color='black')
    # ax.axhline(y=W2[d_ind],label=r'$W_2 = {:.5f}$'.format(W2[d_ind]),lw=1,color='black')
    # ax.axhline(y=W3[d_ind],label=r'$W_3 = {:.5f}$'.format(W3[d_ind]),lw=1,color='black')
    # ax.axhline(y=W4[d_ind],label=r'$W_4 = {:.5f}$'.format(W4[d_ind]),lw=1,color='black')
    # ax.axhline(y=W5[d_ind],label=r'$W_5 = {:.5f}$'.format(W5[d_ind]),lw=1,color='black')
    ax.plot(x,y,  label=r'$\Psi\,(x,t)$')
    # ax.plot(x,y1,  label=r'$\Phi_0\,(x,t)$')
    # ax.plot(x,y2,  label=r'$\left| \Phi_0\,(x,t) \right|^2$')
    # ax.plot(x,y3,  label=r'$\Phi_1\,(x,t)$')
    # ax.plot(x,y4,  label=r'$\left| \Phi_1\,(x,t) \right|^2$')
    # ax.plot(x,y5,  label=r'$\Phi_2\,(x,t)$')
    # ax.plot(x,y6,  label=r'$\left| \Phi_2\,(x,t) \right|^2$')
    # ax.plot(x,y7,  label=r'$\Phi_3\,(x,t)$')
    # ax.plot(x,y8,  label=r'$\left| \Phi_3\,(x,t) \right|^2$')
    # ax.plot(x,y9,  label=r'$\Phi_4\,(x,t)$')
    # ax.plot(x,y10, label=r'$\left| \Phi_4\,(x,t) \right|^2$')
    # ax.plot(x,y11, label=r'$\Phi_5\,(x,t)$')
    # ax.plot(x,y12, label=r'$\left| \Phi_5\,(x,t) \right|^2$')

    ax.plot(x,V(x,d_vals[d_ind]).real,label=r'$V\,(x)$',color='gray',lw=1)
    # plt.title('Oscilador armónico con perturbación cúbica\n' + r'$V\,(x) = (1/2)x^2 {:.2f}x^3$'.format(c) + '\n' + r'para $W_{:.0f}$, $t = {:.1f}$'.format(raiz_W,t))
    # plt.title(r'$t = {:.1f}$'.format(t))
    if d_ind==0:
        plt.ylim(-3,3)
        plt.xlim(-5,5)
    elif d_ind==1:
        plt.ylim(0,10)
        plt.xlim(-6,6)
    else:
        plt.ylim(0,12)
        plt.xlim(-6,6)
    ax.set_xlabel(r'$x\, (a_0)$')
    ax.set_ylabel(r'$\mathrm{Re}\left\{ \Phi\,(x,t) \right\}$')
    # plt.legend(loc=(1.01, 0.5))
    # # for major ticks
    # ax.set_xticks([])
    # # for minor ticks
    # ax.set_xticks([], minor=True)
    # # for major ticks
    # ax.set_yticks([])
    # # for minor ticks
    # ax.set_yticks([], minor=True)

# Llamada a la funcion animacion
# animation.FuncAnimation(<figura>,
#                         <funcion a iterar>,
#                         <numero de iteraciones>,
#                         interval=<delay en ms> )
anim = animation.FuncAnimation(fig, actualizar, numero_frames,
                              interval=1, repeat=True, blit=False)

# Guardar el archivo
# TODO
# anim.save('videos/paquete_ondas_d{}.mp4'.format(d_vals[d_ind]), fps=30, extra_args=['-vcodec', 'libx264'])

plt.show()
# plt.close()
