# _____________________________________________________________________________
# *****************************************************************************
# Autor: José Antonio Quiñonero gris
# Fecha de creación: 12 de abril de 2022
# *****************************************************************************
# -----------------------------------------------------------------------------

# descripcion del programa

# Librerias
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('mine')

# *****************************************************************************
# INICIO
# *****************************************************************************


fichero_datos_1               = '/home/jose/Documents/Universidad/TFG/practicas_QFA/doble_pozo_NH3_ab/data/in-osc_doble_pozo.dat'
fichero_datos_2               = '/home/jose/Documents/Universidad/TFG/practicas_QFA/doble_pozo_NH3_ab/data/in-potencial.dat'
fichero_potencial             = '/home/jose/Documents/Universidad/TFG/practicas_QFA/doble_pozo_NH3_ab/data/out-potencial.dat'
fichero_energias              = '/home/jose/Documents/Universidad/TFG/practicas_QFA/doble_pozo_NH3_ab/data/out-conver_energias.dat'
fichero_funciones_pares       = '/home/jose/Documents/Universidad/TFG/practicas_QFA/doble_pozo_NH3_ab/data/out-funciones_pares.dat'
fichero_funciones_impares     = '/home/jose/Documents/Universidad/TFG/practicas_QFA/doble_pozo_NH3_ab/data/out-funciones_impares.dat'
fichero_densidad_prob_pares   = '/home/jose/Documents/Universidad/TFG/practicas_QFA/doble_pozo_NH3_ab/data/out-densidad_prob_pares.dat'
fichero_densidad_prob_impares = '/home/jose/Documents/Universidad/TFG/practicas_QFA/doble_pozo_NH3_ab/data/out-densidad_prob_impares.dat'

N, a, b = np.loadtxt(fichero_datos_1, unpack=True, skiprows=1)
xmin, xmax, dx = np.loadtxt(fichero_datos_2, unpack=True, skiprows=1)
x, V = np.loadtxt(fichero_potencial, unpack=True, skiprows=3)
n, E, Nconver = np.loadtxt(fichero_energias, unpack=True, skiprows=1)
x, Phi0, Phi2, Phi4 = np.loadtxt(fichero_funciones_pares, unpack=True, skiprows=3)
x, Phi1, Phi3, Phi5 = np.loadtxt(fichero_funciones_impares, unpack=True, skiprows=3)
x, dPhi0, dPhi2, dPhi4 = np.loadtxt(fichero_densidad_prob_pares, unpack=True, skiprows=3)
x, dPhi1, dPhi3, dPhi5 = np.loadtxt(fichero_densidad_prob_impares, unpack=True, skiprows=3)

def Vb(a,b):
    res = b**2/(4*a)
    return res

def x1(n,a,b):
    res = np.sqrt(np.sqrt(b**2-4*Vb(a,b)*a+4*E[n]*a)/a+b/a)/np.sqrt(2)
    return res
def x2(n,a,b):
    res = np.sqrt(b/a-np.sqrt(b**2-4*Vb(a,b)*a+4*E[n]*a)/a)/np.sqrt(2)
    return res

# GRAFICA
nombre_grafica = 'osc_doble_pozo_ab.pdf'

xmin = -3
xmax = 3
ymin = 0
ymax = max(dPhi0) + max(dPhi0)/10

# width as measured in inkscape
width = 15.922
width = 7.2 * 1.5
# height = width / 1.618
height = 4.45

fig, axs = plt.subplots(1,2, figsize=(width, height), sharey=True)

ax = axs[0]
ax.plot(x, V, color='grey')

ax.plot(x, Phi0, label=r'$\left| \Phi_0 \right>$')
# ax.plot(x, Phi1, label=r'$\left| \Phi_1 \right>$')
# ax.plot(x, Phi2, label=r'$\left| \Phi_2 \right>$')
# ax.plot(x, Phi3, label=r'$\left| \Phi_3 \right>$')
# ax.plot(x, Phi4, label=r'$\left| \Phi_4 \right>$')
# ax.plot(x, Phi5, label=r'$\left| \Phi_5 \right>$')

# for i in np.arange(0,4):
#     ax.hlines(y = E[i], xmin=xmin, xmax=xmax, color='grey', lw=0.5)

# for i in np.arange(0,n_barrera):
#     ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
#     ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

# # Por encima de la barrera
# for i in np.arange(n_barrera,len(E)):
#     ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

for i in np.arange(0,len(E)):
    if E[i]<=Vb(a,b):
        ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
        ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)
    else:
        ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set(xlabel=r'$x\ (a_0)$', ylabel=r'$E\ (\mathrm{Ha})$')

# handles, labels = ax.get_legend_handles_labels()
# axs[1].legend(handles[::-1], labels[::-1], loc=(1.01,0.4))
ax.legend(loc='lower left')

# ax.text(0.02, 0.975, 'a)', fontsize=14, bbox=dict(facecolor='white', alpha=0.5), horizontalalignment='left', verticalalignment='top', transform=ax.transAxes)

ax = axs[1]
ax.plot(x, V, color='grey')

ax.plot(x, dPhi0, label=r'$\left| \Phi_0 \right|^2$')
# ax.plot(x, dPhi1, label=r'$\left| \Phi_1 \right|^2$')
# ax.plot(x, dPhi2, label=r'$\left| \Phi_2 \right|^2$')
# ax.plot(x, dPhi3, label=r'$\left| \Phi_3 \right|^2$')
# ax.plot(x, Phi4, label=r'$\left| \Phi_4 \right>$')
# ax.plot(x, Phi5, label=r'$\left| \Phi_5 \right>$')

transparencia = 0.5
# ax.fill_between(x, dPhi0, E[0], alpha=transparencia)
# ax.fill_between(x, dPhi1, E[1], alpha=transparencia)
# ax.fill_between(x, dPhi2, E[2], alpha=transparencia)
# ax.fill_between(x, dPhi3, E[3], alpha=transparencia)

for i in np.arange(0,len(E)):
    if E[i]<=Vb(a,b):
        ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
        ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)
    else:
        ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)


ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set(xlabel=r'$x\ (a_0)$')

# handles, labels = ax.get_legend_handles_labels()
# axs[1].legend(handles[::-1], labels[::-1], loc=(1.01,0.4))
ax.legend(loc='lower left')

# if b==1:
#     ax.text(x1(0,a,b)+0.3, E[0], '$v=0$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(1,a,b)+0.3, E[1], '$v=1$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(2,a,b)+0.3, E[2], '$v=2$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(3,a,b)+0.3, E[3], '$v=3$', horizontalalignment='center', verticalalignment='center')
# elif b==2:
#     ax.text(x1(0,a,b)+0.3, E[0], '$v=0$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(1,a,b)+0.3, E[1], '$v=1$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(2,a,b)+0.3, E[2], '$v=2$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(3,a,b)+0.3, E[3], '$v=3$', horizontalalignment='center', verticalalignment='center')
# elif b==3:
#     ax.text(x1(0,a,b)+0.3, E[0], '$v=0$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(1,a,b)+0.3, E[1], '$v=1$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(2,a,b)+0.3, E[2], '$v=2$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(3,a,b)+0.3, E[3], '$v=3$', horizontalalignment='center', verticalalignment='center')
# elif b==4:
#     ax.text(x1(0,a,b)+0.3, E[0]-0.1, '$v=0$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(1,a,b)+0.3, E[1]+0.1, '$v=1$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(2,a,b)+0.3, E[2], '$v=2$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(3,a,b)+0.3, E[3], '$v=3$', horizontalalignment='center', verticalalignment='center')
# elif b==5:
#     ax.text(x1(0,a,b)+0.3, E[0]-0.2, '$v=0$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(1,a,b)+0.3, E[1]+0.2, '$v=1$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(2,a,b)+0.3, E[2], '$v=2$', horizontalalignment='center', verticalalignment='center')
#     ax.text(x1(3,a,b)+0.3, E[3], '$v=3$', horizontalalignment='center', verticalalignment='center')

plt.savefig(nombre_grafica, transparent='True', bbox_inches='tight')
# plt.show()
