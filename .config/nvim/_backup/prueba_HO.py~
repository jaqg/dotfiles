# _____________________________________________________________________________
# *****************************************************************************
# Autor: José Antonio Quiñonero gris
# Fecha de creación: 27 de febrero de 2022
# *****************************************************************************
# -----------------------------------------------------------------------------

import numpy as np
import scipy.integrate as integrate
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from math import factorial
from scipy.special import hermite

# Realizo el calculo en unidades atomicas, por lo que
hbar = 1                       # Constante de Planck reducida
m = 1                          # Masa de la particula
k = 1                          # Constante de fuerza
omega = np.sqrt(k/m)           # Momento angular: omega = (k/m)^(1/2)

# Funcion potencial
def V(x):
    return (1/2) * k * x**2

# Valores propios de la energia
def E(v):
    return (v + 1/2) * hbar * omega

# Definicion de una constante 'alpha' para simplificar la formulacion
alpha = m * omega/hbar

# Variable de desplazamiento xi
def xi(x):
    return np.sqrt(alpha) * x

# Constante de normalizacion
def Nv(v):
    return ( np.sqrt(alpha/np.pi) * (1/(2**v * factorial(v))) )**(1/2)

# Funcion exponencial a diferenciar
def diff_expo(x):
    return np.exp(-xi(x)**2)

# Funcion exponencial
def expo(x):
    return np.exp(-(xi(x)**2)/2)

# Polinomios de Hermite
def Hv(v,x):
    herm = hermite(v)
    P_v = herm(x)
    return P_v

# Componente temporal de funciones
def time_expo(v,t):
    return np.exp(-1j * E(v) * t/hbar)

# Funciones propias
def phi(v,x,t):
    return Nv(v) * expo(x) * Hv(v,x) * time_expo(v,t)

#stationary states (time independent part)
def psi_n(v,x):
    res = Nv(v) * expo(x) * Hv(v,x)
    return res

#Initial wave function of the particle (not normalised)
def psi0(x):
    x0 = -3
    res = psi_n(0,x-x0)
    # res = psi_n(4,x-x0)
    return res

#coefficients (first 30 states)
c = np.zeros(30,dtype = np.complex_);

#calculate co-efficients using fourier's trick
for i in range(30):
    n = i+1;
    I_Real = lambda x: psi_n(n,x)*np.real(psi0(x));
    I_Imag = lambda x: psi_n(n,x)*np.imag(psi0(x));
    c[i] = complex(integrate.quad(I_Real,-10,10)[0],integrate.quad(I_Imag,-10,10)[0]);

#Wave function at time t
def PSI(x,t):
    val = 0
    for i in range(30):
        n = i+1;
        val+=c[i]*psi_n(n,x)*np.exp(complex(0,-E(n)*t/hbar))

    return val;

H_med = 0
for i in range(30):
    n = i+1;
    H_med+=abs(c[i])**2 * E(n)
# print(H_med)

#plot and animate

fig = plt.figure()
ax = plt.axes(xlim=(-5,5), ylim=(0,H_med+2))

x = np.linspace(-10,10,100);
PSI_PD = np.zeros(100);

ax.plot(x,V(x),color='grey')
# ax.axhline(y=H_med, xmin=-10,xmax=-10,color='black')
ax.axhline(y=H_med,lw=0.5,color='black')

#plots the probability density
def plot_probability(frame_number):
    t = frame_number/2;
    for i in range(100):
        PSI_PD[i] = abs(PSI(x[i],t))**2; #probability density
    p = plt.fill_between(x, PSI_PD+H_med,y2=H_med,color='orange');
    # p = plt.plot(x, PSI_PD,color='orange');
    return p,

anim = animation.FuncAnimation(fig, plot_probability,frames=100, interval=30, blit=True)

plt.show()
# anim.save('videos/prueba_HO.mp4', fps=30, extra_args=['-vcodec', 'libx264'])
