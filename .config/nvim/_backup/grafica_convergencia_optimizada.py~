# Import packages
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import pandas as pd
import tikzplotlib as tk

from matplotlib.cm import get_cmap

from scipy.interpolate import make_interp_spline, BSpline

# Import my own plot style
plt.style.use('mine')
#plt.style.use('ggplot')
#plt.style.use('seaborn')

# Colores del cycler
colores=['#008fd5', '#fc4f30', '#e5ae38', '#6d904f', '#8b8b8b', '#810f7c']

# Grafico
# fig, axs = plt.subplots(2,2, figsize=(9.2, 9.2))
fig = plt.figure(figsize=(7.2,7.2*2))
axs = fig.add_gridspec(4,4)
ax1 = fig.add_subplot(axs[0, 0:2])
ax2 = fig.add_subplot(axs[0, 2:4])
ax3 = fig.add_subplot(axs[1, 1:3])
# ax4 = fig.add_subplot(axs[0, 1])

# =========================
### SIN OPTIMIZAR ALPHA ###
# =========================
# Data for plotting
path_to_file_1 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/convergencia_oscilador_cuartico_8_funciones/data/out-convergencia_oscilador_cuartico_8f_2.dat'
d, N, W0, W1, W2, W3, W4, W5, W6, W7 = np.loadtxt(path_to_file_1, unpack=True, skiprows=1)

alpha_value = 0.5
## d=0.1 ##
# Lineas grises
lw_gris = 0.7
grosor_izquierda = 0.2
grosor_derecha = 0.2
n_in = 0
n_fin = 6
for j in np.arange(n_in,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W0[j],W0[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W1[j],W1[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+1,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W2[j],W2[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+2,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W3[j],W3[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+3,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W4[j],W4[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+4,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W5[j],W5[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+5,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W6[j],W6[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')

# Lineas negras
lw_negras = 1.5
Ni = 0
Nf = 7
for i in np.arange(Ni, Nf, 1):
    ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W0[i],W0[i]), lw=lw_negras, alpha=alpha_value, color='black')
    ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W1[i],W1[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+1:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W2[i],W2[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+2:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W3[i],W3[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+3:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W4[i],W4[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+4:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W5[i],W5[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+5:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W6[i],W6[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+6:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W7[i],W7[i]), lw=lw_negras, alpha=alpha_value, color='black')

# Texto
n_text = 6
param_baj = 0.5
ax1.text(N[n_text]+0.3, W0[n_text]-param_baj, r'$W_0$', fontsize=8)
ax1.text(N[n_text]+0.3, W1[n_text]-param_baj, r'$W_1$', fontsize=8)
ax1.text(N[n_text]+0.3, W2[n_text]-param_baj, r'$W_2$', fontsize=8)
ax1.text(N[n_text]+0.3, W3[n_text]-param_baj, r'$W_3$', fontsize=8)
ax1.text(N[n_text]+0.3, W4[n_text]-param_baj, r'$W_4$', fontsize=8)
ax1.text(N[n_text]+0.3, W5[n_text]-param_baj, r'$W_5$', fontsize=8)
ax1.text(N[n_text]+0.3, W6[n_text]-param_baj, r'$W_6$', fontsize=8)
ax1.text(N[n_text]+0.3, W7[n_text]-param_baj, r'$W_7$', fontsize=8)

# ## d=0.5 ##
# Lineas grises
n_in = 7
n_fin = 13
for j in np.arange(n_in,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W0[j],W0[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W1[j],W1[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+1,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W2[j],W2[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+2,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W3[j],W3[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+3,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W4[j],W4[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+4,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W5[j],W5[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+5,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W6[j],W6[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')

# Lineas negras
Ni = 7
Nf = 14
for i in np.arange(Ni, Nf, 1):
    ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W0[i],W0[i]), lw=lw_negras, alpha=alpha_value, color='black')
    ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W1[i],W1[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+1:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W2[i],W2[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+2:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W3[i],W3[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+3:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W4[i],W4[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+4:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W5[i],W5[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+5:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W6[i],W6[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+6:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W7[i],W7[i]), lw=lw_negras, alpha=alpha_value, color='black')

# # Texto
# n_text = 13
# param_baj = 0.5
# ax2.text(N[n_text]+0.3, W0[n_text]-param_baj, r'$W_0$', fontsize=8)
# ax2.text(N[n_text]+0.3, W1[n_text]-param_baj, r'$W_1$', fontsize=8)
# ax2.text(N[n_text]+0.3, W2[n_text]-param_baj, r'$W_2$', fontsize=8)
# ax2.text(N[n_text]+0.3, W3[n_text]-param_baj, r'$W_3$', fontsize=8)
# ax2.text(N[n_text]+0.3, W4[n_text]-param_baj, r'$W_4$', fontsize=8)
# ax2.text(N[n_text]+0.3, W5[n_text]-param_baj, r'$W_5$', fontsize=8)
# ax2.text(N[n_text]+0.3, W6[n_text]-param_baj, r'$W_6$', fontsize=8)
# ax2.text(N[n_text]+0.3, W7[n_text]-param_baj, r'$W_7$', fontsize=8)

# ## d=1.0 ##
# Lineas grises
n_in = 14
n_fin = 20
for j in np.arange(n_in,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W0[j],W0[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W1[j],W1[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+1,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W2[j],W2[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+2,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W3[j],W3[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+3,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W4[j],W4[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+4,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W5[j],W5[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')
for j in np.arange(n_in+5,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W6[j],W6[j+1]), lw=lw_gris, linestyle='--', alpha=alpha_value, color='gray')

# Lineas negras
Ni = 14
Nf = 21
for i in np.arange(Ni, Nf, 1):
    ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W0[i],W0[i]), lw=lw_negras, alpha=alpha_value, color='black')
    ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W1[i],W1[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+1:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W2[i],W2[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+2:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W3[i],W3[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+3:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W4[i],W4[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+4:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W5[i],W5[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+5:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W6[i],W6[i]), lw=lw_negras, alpha=alpha_value, color='black')
    if i>=Ni+6:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W7[i],W7[i]), lw=lw_negras, alpha=alpha_value, color='black')

# # Texto
# n_text = 20
# param_baj = 0.5
# ax3.text(N[n_text]+0.3, W0[n_text]-param_baj, r'$W_0$', fontsize=8)
# ax3.text(N[n_text]+0.3, W1[n_text]-param_baj, r'$W_1$', fontsize=8)
# ax3.text(N[n_text]+0.3, W2[n_text]-param_baj, r'$W_2$', fontsize=8)
# ax3.text(N[n_text]+0.3, W3[n_text]-param_baj, r'$W_3$', fontsize=8)
# ax3.text(N[n_text]+0.3, W4[n_text]-param_baj, r'$W_4$', fontsize=8)
# ax3.text(N[n_text]+0.3, W5[n_text]-param_baj, r'$W_5$', fontsize=8)
# ax3.text(N[n_text]+0.3, W6[n_text]-param_baj, r'$W_6$', fontsize=8)
# ax3.text(N[n_text]+0.3, W7[n_text]-param_baj, r'$W_7$', fontsize=8)

# =========================
### OPTIMIZANDO ALPHA ### =========================
# Data for plotting
path_to_file_2 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/optimizacion_convergencia_oscilador_cuartico/data/out-energias_osc_pert_cuart_opt_2.dat'
d, N, W0, W1, W2, W3, W4, W5, W6, W7 = np.loadtxt(path_to_file_2, unpack=True, skiprows=1)

## d=0.1 ##
# Lineas grises
lw_gris = 0.7
grosor_izquierda = 0.2
grosor_derecha = 0.2
n_in = 0
n_fin = 6
for j in np.arange(n_in,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W0[j],W0[j+1]), lw=lw_gris, linestyle='--', color='gray')
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W1[j],W1[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+1,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W2[j],W2[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+2,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W3[j],W3[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+3,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W4[j],W4[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+4,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W5[j],W5[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+5,n_fin,1):
    ax1.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W6[j],W6[j+1]), lw=lw_gris, linestyle='--', color='gray')

# Lineas negras
lw_negras = 1.5
Ni = 0
Nf = 7
for i in np.arange(Ni, Nf, 1):
    ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W0[i],W0[i]), lw=lw_negras, color='black')
    ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W1[i],W1[i]), lw=lw_negras, color='black')
    if i>=Ni+1:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W2[i],W2[i]), lw=lw_negras, color='black')
    if i>=Ni+2:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W3[i],W3[i]), lw=lw_negras, color='black')
    if i>=Ni+3:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W4[i],W4[i]), lw=lw_negras, color='black')
    if i>=Ni+4:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W5[i],W5[i]), lw=lw_negras, color='black')
    if i>=Ni+5:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W6[i],W6[i]), lw=lw_negras, color='black')
    if i>=Ni+6:
        ax1.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W7[i],W7[i]), lw=lw_negras, color='black')

# Texto
# n_text = 6
# param_baj = 0.5
# ax1.text(N[n_text]+0.3, W0[n_text]-param_baj, r'$W_0$', fontsize=8)
# ax1.text(N[n_text]+0.3, W1[n_text]-param_baj, r'$W_1$', fontsize=8)
# ax1.text(N[n_text]+0.3, W2[n_text]-param_baj, r'$W_2$', fontsize=8)
# ax1.text(N[n_text]+0.3, W3[n_text]-param_baj, r'$W_3$', fontsize=8)
# ax1.text(N[n_text]+0.3, W4[n_text]-param_baj, r'$W_4$', fontsize=8)
# ax1.text(N[n_text]+0.3, W5[n_text]-param_baj, r'$W_5$', fontsize=8)
# ax1.text(N[n_text]+0.3, W6[n_text]-param_baj, r'$W_6$', fontsize=8)
# ax1.text(N[n_text]+0.3, W7[n_text]-param_baj, r'$W_7$', fontsize=8)

# ## d=0.5 ##
# Lineas grises
n_in = 7
n_fin = 13
for j in np.arange(n_in,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W0[j],W0[j+1]), lw=lw_gris, linestyle='--', color='gray')
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W1[j],W1[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+1,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W2[j],W2[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+2,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W3[j],W3[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+3,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W4[j],W4[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+4,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W5[j],W5[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+5,n_fin,1):
    ax2.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W6[j],W6[j+1]), lw=lw_gris, linestyle='--', color='gray')

# Lineas negras
Ni = 7
Nf = 14
for i in np.arange(Ni, Nf, 1):
    ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W0[i],W0[i]), lw=lw_negras, color='black')
    ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W1[i],W1[i]), lw=lw_negras, color='black')
    if i>=Ni+1:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W2[i],W2[i]), lw=lw_negras, color='black')
    if i>=Ni+2:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W3[i],W3[i]), lw=lw_negras, color='black')
    if i>=Ni+3:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W4[i],W4[i]), lw=lw_negras, color='black')
    if i>=Ni+4:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W5[i],W5[i]), lw=lw_negras, color='black')
    if i>=Ni+5:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W6[i],W6[i]), lw=lw_negras, color='black')
    if i>=Ni+6:
        ax2.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W7[i],W7[i]), lw=lw_negras, color='black')

# # Texto
# n_text = 13
# param_baj = 2
# ax2.text(N[n_text]+0.2, W0[n_text]-param_baj, r'$W_0$', fontsize=8)
# ax2.text(N[n_text]+0.2, W1[n_text]-param_baj, r'$W_1$', fontsize=8)
# ax2.text(N[n_text]+0.2, W2[n_text]-param_baj, r'$W_2$', fontsize=8)
# ax2.text(N[n_text]+0.2, W3[n_text]-param_baj, r'$W_3$', fontsize=8)
# ax2.text(N[n_text]+0.2, W4[n_text]-param_baj, r'$W_4$', fontsize=8)
# ax2.text(N[n_text]+0.2, W5[n_text]-param_baj, r'$W_5$', fontsize=8)
# ax2.text(N[n_text]+0.2, W6[n_text]-param_baj, r'$W_6$', fontsize=8)
# ax2.text(N[n_text]+0.2, W7[n_text]-param_baj, r'$W_7$', fontsize=8)

# ## d=1.0 ##
# Lineas grises
n_in = 14
n_fin = 20
for j in np.arange(n_in,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W0[j],W0[j+1]), lw=lw_gris, linestyle='--', color='gray')
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W1[j],W1[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+1,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W2[j],W2[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+2,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W3[j],W3[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+3,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W4[j],W4[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+4,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W5[j],W5[j+1]), lw=lw_gris, linestyle='--', color='gray')
for j in np.arange(n_in+5,n_fin,1):
    ax3.plot((N[j]+grosor_derecha,N[j+1]-grosor_izquierda),(W6[j],W6[j+1]), lw=lw_gris, linestyle='--', color='gray')

# Lineas negras
Ni = 14
Nf = 21
for i in np.arange(Ni, Nf, 1):
    ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W0[i],W0[i]), lw=lw_negras, color='black')
    ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W1[i],W1[i]), lw=lw_negras, color='black')
    if i>=Ni+1:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W2[i],W2[i]), lw=lw_negras, color='black')
    if i>=Ni+2:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W3[i],W3[i]), lw=lw_negras, color='black')
    if i>=Ni+3:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W4[i],W4[i]), lw=lw_negras, color='black')
    if i>=Ni+4:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W5[i],W5[i]), lw=lw_negras, color='black')
    if i>=Ni+5:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W6[i],W6[i]), lw=lw_negras, color='black')
    if i>=Ni+6:
        ax3.plot((N[i]-grosor_izquierda,N[i]+grosor_derecha),(W7[i],W7[i]), lw=lw_negras, color='black')

# # Texto
# n_text = 20
# param_baj = 5
# ax3.text(N[n_text]+0.2, W0[n_text]-param_baj, r'$W_0$', fontsize=8)
# ax3.text(N[n_text]+0.2, W1[n_text]-param_baj, r'$W_1$', fontsize=8)
# ax3.text(N[n_text]+0.2, W2[n_text]-param_baj, r'$W_2$', fontsize=8)
# ax3.text(N[n_text]+0.2, W3[n_text]-param_baj, r'$W_3$', fontsize=8)
# ax3.text(N[n_text]+0.2, W4[n_text]-param_baj, r'$W_4$', fontsize=8)
# ax3.text(N[n_text]+0.2, W5[n_text]-param_baj, r'$W_5$', fontsize=8)
# ax3.text(N[n_text]+0.2, W6[n_text]-param_baj, r'$W_6$', fontsize=8)
# ax3.text(N[n_text]+0.2, W7[n_text]-param_baj, r'$W_7$', fontsize=8)

# Otros
ax1.set(xlabel=r'$N$', ylabel=r'$W_n$', title=r'$d=0.1$')
ax2.set(xlabel=r'$N$', ylabel=r'$W_n$', title=r'$d=0.5$')
ax3.set(xlabel=r'$N$', ylabel=r'$W_n$', title=r'$d=1.0$')
ax3.set(xlabel=r'$N$', title=r'$d=1.0$')
# Numero de ticks
# ax1.locator_params(axis="x", nbins=4)
x_min = 1.5
x_max = 8.5
ax1.set_xlim(x_min, 8.99)
ax1.set_ylim(-22/11, 22)
ax2.set_xlim(x_min, x_max)
ax2.set_ylim(-80/11, 80)
ax3.set_xlim(x_min, x_max)
ax3.set_ylim(-150/11, 150)

ax1.locator_params(axis="x", nbins=8)
ax2.locator_params(axis="x", nbins=8)
ax3.locator_params(axis="x", nbins=8)

# for ax in axs.flat:
    # ax.set_xlim(1.5,8.9)
    # ax.set_ylim(0, 2)
    # ax.grid()
    # ax.legend(loc=(1.01,0.1))
    # Numero de ticks
    # ax.locator_params(axis="x", nbins=8)
    # ax.locator_params(axis="y", nbins=2)

# ax4.remove()

plt.savefig('grafica_convergencia_oscilador_cuartico_optimizado.pdf', transparent='True', bbox_inches='tight')
# plt.savefig('grafica_convergencia_oscilador_cuartico_optimizado.pdf')
# plt.show()
