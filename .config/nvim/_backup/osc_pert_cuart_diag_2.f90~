! _____________________________________________________________________________
! *****************************************************************************
! Autor: José Antonio Quiñonero Gris
! Fecha de creación: 15 de febrero de 2022
! *****************************************************************************
! -----------------------------------------------------------------------------

! -----------------------------------------------------------------------------
! PROGRAMA PRINCIPAL
! -----------------------------------------------------------------------------
program osc_pert_cuart_diag

    ! Oscilador armonico perturbado cuarticamente
    ! Ĥ = -hbar**2/(2*m) <v|d2/dx2|v> + k/2 <v|x2|v> + d <v|x4|v>

    ! Programa para calcular las energias y parametros variacionales
    ! diagonalizando la matriz del hamiltoniano, de manera que
    ! Hc = Ec
    ! donde H es una matriz real simetrica de elementos Hij=<i|Ĥ|j>
    ! Obtendremos como autovalores las energias variacionales, E
    ! y como autovectores los coeficientes variacionales c

    ! IMPLICIT REAL*8(A-H,O-Z)
    ! IMPLICIT INTEGER(I-N)

    implicit none

    ! =======================
    ! Definicion de variables
    ! =======================

    integer :: i,j,l,jj, j_arr

    COMMON k,hbar,m
    ! Constante k
    real*8 :: k=1.0
    ! Unidades atomicas
    real*8 :: hbar=1.0, m=1.0
    ! Numero de funciones base
    integer :: N, Nmax, Npar, Nimpar, N_conver
    ! Valores para el parametro de perturbacion cuartica
    integer, parameter :: rango_d=3
    real*8, dimension(rango_d) :: valores_d
    ! Parametro de perturbacion cuartica
    real*8 :: d
    ! Resultado de la funcion para el parametro alpha
    real*8 :: alpha
    ! Resultado de la funcion para la integral sobre d2/dx2
    real*8 :: derivada
    ! Resultado de la funcion para la integral sobre x2
    real*8 :: cuadratica
    ! Resultado de la funcion para la integral sobre x4
    real*8 :: cuartica
    ! Integrales del hamiltoniano, elementos Hij
    real*8 :: H
    ! Matriz del hamiltoniano
    real*8, dimension(:,:), allocatable :: H_par, H_impar
    ! Array para los valores propios de la energia
    real*8, dimension(:), allocatable :: E, E_par, E_impar
    ! Array de energias para cada N
    real*8, dimension(:,:), allocatable :: E_arr
    ! Variables para los valores de energia del bucle para hallar N_conver
    real*8 :: E_sup, E_inf, Delta_E, E_conver
    ! Array necesaria para la subrutina de diagonalizacion
    real*8, dimension(:), allocatable :: work
    ! Declaracion de parametros necesarios para la subrutina que calcula los
    ! eigenvalues
    integer :: nr, lwork, info
    real*8, dimension(21,4) :: E_tabla
    logical :: F

    ! ===================
    ! INICIO DEL PROGRAMA
    ! ===================

    ! Evitar units=0,5,6
    ! Apertura y lectura del fichero con los datos iniciales
    open(unit=1, file="data/in-osc_pert_cuart_diag.dat")
    ! Omite la primera linea del archivo de datos de entrada
    read(1,*)
    ! Lee los datos de entrada
    read(1,*) Nmax, valores_d(1), valores_d(2), valores_d(3)
    close(1)

    ! Apertura del fichero de resultados
    open(unit=2,  file="data/out-energias_variacionales.dat")
    open(unit=3,  file="data/out-Econver_n=0,5,10,15.dat")
    open(unit=4,  file="data/out-E_arr.dat")
    open(unit=7,  file="data/out-N_vs_W0.dat")
    open(unit=8,  file="data/out-N_vs_W5.dat")
    open(unit=9,  file="data/out-N_vs_W10.dat")
    open(unit=10, file="data/out-N_vs_W15.dat")
    ! open(unit=, file="data/out-parametros_variacionales.dat")
    ! open(unit=, file="data/out-parametros_variacionales_d05.dat")
    ! open(unit=, file="data/out-parametros_variacionales_d1.dat")

    ! Formatos
    9999 format('====================================================&
                    =============================')
    9998 format('----------------------------------------------------&
                    -----------------------------')

    ! Bucle principal:
    ! Para cada valor de d
    !   Para N funciones base
    !       Crea y escribe la matriz H
    !       Halla los valores y vectores propios
    !       Escribe los resultados
    allocate(E_arr(Nmax,Nmax))
    do_valores_d: do l=1, rango_d, 1
        d = valores_d(l)
        ! Calcula el valor de alpha optimizado para la perturbacion d
        call alpha_opt(d, alpha)

        ! Escribe la primera fila de las tablas
        ! - Fichero 2 -
        write(2,9999)
        write(2,'(34x, "d =", f5.2)') d
        write(2,9998)
        write(2,'(2x, "N", 8x, "W0", 13x, "W1", 13x, "W2", 13x, "W3", 13x,&
                    "W4", 13x, "W5", 13x, "W6", 13x, "W7")')

        ! - Fichero 3 -
        write(3,9999)
        write(3,'("d =", f5.2)') d
        write(3,9998)
        write(3,'(2x, "n", 5x, "W_n(conv.)", 3x, "N_conv.")')
        write(3,9998)

        ! - Fichero 4 -
        write(4,9999)
        write(4,'(34x, "d =", f5.2)') d
        write(4,9998)

        ! - Ficheros 7, 8, 9, 10 -
        ! Me centro en d=0.5 para los niveles n=0, 5, 10 y 15 en el fichero 3
        if (d==0.5) then
            do i=7, 10, 1
                write(i,'(2x, "d =", f5.2)') d
            end do
            write(7, '(2x, "N", 8x, "W0")')
            write(8, '(2x, "N", 8x, "W5")')
            write(9, '(2x, "N", 8x, "W10")')
            write(10,'(2x, "N", 8x, "W15")')
        end if


        ! Halla los resultados para cada valor de N
        j_arr = 0 ! Variable auxiliar
        do_N: do N=2, Nmax, 1
            ! Da dimensiones al array de energias variacionales
            allocate(E(N))
            ! y del array 'work' para la subrutina de diagonalizacion
            allocate(work(3*N))

            ! Si N es par, Npar = N/2 = Nimpar
            ! Si N es impar, Npar = N/2 + 1 y Nimpar = N - Npar
            ! NOTA: Si btest(i,0) = F, i es par
            if (btest(N,0).eqv.F) then
                Npar   = N/2
                Nimpar = N/2
            else
                Npar   = N/2 + 1
                Nimpar = N/2
            end if

            ! ------------
            ! MATRIZ PAR
            ! ------------

            ! Da dimensiones a la matriz par del hamiltoniano
            allocate(H_par(Npar,Npar))
            ! y de valores propios
            allocate(E_par(Npar))

            ! write(*,*) 'Matriz PAR ','d =', d, 'N =', N, 'Npar =', Npar
            ! Crear la matriz del hamiltoniano par
            H_par(:,:) = 0.0
            do_filas_par: do i=1, Npar, 1
                do_columnas_par: do j=1, Npar, 1
                    ! Calcula los elementos de la matriz y almacenalos
                    H_par(i,j) = H(2*(i-1),2*(j-1),d,alpha)
                end do do_columnas_par
                ! Escribe la matriz
                ! write(*,'(100g15.5)') ( H_par(i,j), j=1,Npar )
            end do do_filas_par
            ! write(*,*) '---'
            ! Rutina para calcular los valores propios
            lwork = 3*N
            call dsyev ( 'V', 'U', Npar, H_par, Npar, E_par,&
                         work, lwork, info )
            ! Los valores propios de la energia son guardados en E
            ! Los vectores propios, los coeficientes de la combinacion lineal,
            ! son guardados en la matriz H_mat a la salida
            ! Cada columna de la matriz H_mat, a la salida, da un eigenvector
            ! H_mat(j,i)
            !   j = indice de la funcion base
            !   i = indice del valor propio

            ! Si la diagonalizacion ha funcionado, info = 0
            if (info/= 0) then
                write(*,*) 'La diagonalizacion de la matriz H_par ha fallado'
                write(*,*) 'INFO =', info
                stop
            end if

            ! Escribe el array E
            do i=1, Npar, 1
                ! Ordena los valores pares en las posiciones impares
                E(2*i - 1) = E_par(i)
            end do

            ! Borra las matrices
            deallocate(H_par)
            deallocate(E_par)

            ! ------------
            ! MATRIZ IMPAR
            ! ------------

            ! Da dimensiones a la matriz impar del hamiltoniano
            allocate(H_impar(Nimpar,Nimpar))
            ! y de valores propios
            allocate(E_impar(Nimpar))

            ! write(*,*) 'Matriz IMPAR ','d =',d,'N =',N,'Nimpar =',Nimpar
            ! Crear la matriz del hamiltoniano impar
            H_impar(:,:) = 0.0
            do_filas_impar: do i=1, Nimpar, 1
                do_columnas_impar: do j=1, Nimpar, 1
                    ! Calcula los elementos de la matriz y almacenalos
                    H_impar(i,j) = H(2*i-1,2*j-1,d,alpha)
                end do do_columnas_impar
                ! Escribe la matriz
                ! write(*,'(100g15.5)') ( H_impar(i,j), j=1,Nimpar )
            end do do_filas_impar
            ! write(*,*) '---'
            ! Rutina para calcular los valores propios
            lwork = 3*N
            call dsyev ( 'V', 'U', Nimpar, H_impar, Nimpar, E_impar,&
                         work, lwork, info )

            ! Los valores propios de la energia son guardados en E
            ! Los vectores propios, los coeficientes de la combinacion lineal,
            ! son guardados en la matriz H_mat a la salida
            ! Cada columna de la matriz H_mat, a la salida, da un eigenvector
            ! H_mat(j,i)
            !   j = indice de la funcion base
            !   i = indice del valor propio

            ! Si la diagonalizacion ha funcionado, info = 0
            if (info/= 0) then
                write(*,*) 'La diagonalizacion de la matriz H_impar ha fallado'
                write(*,*) 'INFO =', info
                stop
            end if

            ! Escribe el array E
            do i=1, Nimpar, 1
                ! Ordena los valores impares en las posiciones impares
                E(2*i) = E_impar(i)
            end do

            ! borra las matrices
            deallocate(H_impar)
            deallocate(E_impar)
            deallocate(work)

            ! Escribe las 7 primeras energias variacionales cuando N>=8
            jj = N  ! Variable auxiliar
            if (jj<=8) then
                write(2,' (i3.1, 100f15.5)') N, ( E(i), i=1,N ), &
                                             ( j*0., j=1,8-jj )
            else
                write(2,' (i3.1, 100f15.5)') N, ( E(i), i=1,8 )
            end if

            ! Escribe los valores de W0, W5, W10 y W15 en sus ficheros para
            ! d=0.5
            if (d==0.5) then
                write(7,'  (i3.1, 100f15.5)') N, E(1)
                if (N>=6) then
                    write(8,'  (i3.1, 100f15.5)') N, E(6)
                end if
                if (N>=11) then
                    write(9,'  (i3.1, 100f15.5)') N, E(11)
                end if
                if (N>=16) then
                    write(10,' (i3.1, 100f15.5)') N, E(16)
                end if
            end if

            ! TODO: crear array con los parametros variacionales
            ! TODO: corregir unidad de fichero de escritura
            ! if (N==Nmax) then
            !      write(3,9999)
            !      write(3,'(34x, "d =", f5.2)') d
            !      write(3,9998)
            !      write(3,'(3x,"c_i(Phi_0)", 5x,"c_i(Phi_1)", 5x,"c_i(Phi_2)", &
            !                5x,"c_i(Phi_3)", 5x,"c_i(Phi_4)", 5x,"c_i(Phi_5)")')
            !      do j=1, n, 1
            !          ! Escribe los coeficientes para las 4 primeros estados
            !          write(3,'(i5.2, 100f10.5)') n, ( H_mat(j,i), i=1,6 )
            !          ! Documento para la grafica
            !          if (d=0.1) then
            !              ! Fichero con los parametros variacionales para d=0.1
            !              write(4,'(i5.2,100f10.5)') n, ( H_mat(j,i), i=1,6 )
            !          elseif (d=0.5) then
            !              ! Fichero con los parametros variacionales para d=0.5
            !              write(7,'(i5.2,100f10.5)') n, ( H_mat(j,i), i=1,6 )
            !          elseif (d=1.0) then
            !              ! Fichero con los parametros variacionales para d=1.0
            !              write(8,'(i5.2,100f10.5)') n, ( H_mat(j,i), i=1,6 )
            !          end if
            !      end do
            !  end if

            ! Array auxiliar (E_arr) que almacena cada valor de Wn(N) para un
            ! numero de funciones base N dado, de manera que
            !           W0(N1)  W1(N1)  ..
            ! E_arr =   W0(N2)  W1(N2)  ..
            !            :       :
            ! Uso este array para controlar el numero de funciones base para
            ! la convergencia de cada nivel
            j_arr = j_arr + 1
            do i=1, N, 1
                E_arr(j_arr, i) = E(i)
            end do

            ! Borra la ultima matriz
            deallocate(E)
        end do do_N

        ! Escribe el array E_arr
        do i=1, Nmax-1, 1
            write(4,'(1000f15.5)') ( E_arr(i,j), j=1, Nmax )
        end do

        ! Bucle para encontrar el numero de funciones base de convergencia
        do j=1, 16, 5
            do i=1, Nmax, 1
                ! E_sup = E_arr(i+5,1) ! Cambiar limite del DO de Nmax a Nmax-5
                E_sup = E_arr(Nmax-1,j)
                E_inf = E_arr(i,j)
                Delta_E = E_inf - E_sup
                if (abs(Delta_E)<=0.00001) then
                    N_conver = i + 1
                    E_conver = E_inf
                    exit
                end if
            end do
            if (N_conver<Nmax) then
                write(3,'(i3.1, f15.5, i5.2)') j-1, E_conver, N_conver
            else
                write(3,'(i3.1, f15.5, "Aumentar Nmax")') j-1, E_conver
            end if
        end do
    end do do_valores_d

    deallocate(E_arr)

    close(2)
    close(3)
    close(4)
    close(7)
    close(8)
    close(9)
    close(10)

    write(*,*) 'El programa ha finalizado'

    stop
endprogram osc_pert_cuart_diag
