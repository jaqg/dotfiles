# _____________________________________________________________________________
# *****************************************************************************
# Autor: José Antonio Quiñonero gris
# Fecha de creación: 12 de abril de 2022
# *****************************************************************************
# -----------------------------------------------------------------------------

# descripcion del programa

# Librerias
import numpy as np
import matplotlib.pyplot as plt

plt.style.use('mine')

colores=['#E69F00', '#56B4E9', '#009E73', '#0072B2', '#D55E00', '#CC79A7', '#F0E442']

# *****************************************************************************
# INICIO
# *****************************************************************************


fichero_datos_1 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_3/data/in-osc_doble_pozo.dat'
fichero_datos_2 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_3/data/in-potencial.dat'
fichero_potencial = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_3/data/out-potencial.dat'
fichero_energias = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_3/data/out-conver_energias.dat'
fichero_psi1 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_3/data/out-psi1.dat'
fichero_psi2 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_3/data/out-psi2.dat'
fichero_psi3 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_3/data/out-psi3.dat'
fichero_psi4 = '/home/jose/Documents/Universidad/TFG/practicas_QFA/osc_doble_pozo_3/data/out-psi4.dat'

N, a, b = np.loadtxt(fichero_datos_1, unpack=True, skiprows=1)
xmin, xmax, dx = np.loadtxt(fichero_datos_2, unpack=True, skiprows=1)
x, V = np.loadtxt(fichero_potencial, unpack=True, skiprows=3)
n, E, Nconver = np.loadtxt(fichero_energias, unpack=True, skiprows=1)
E_psi1, x, psi1, dpsi1 = np.loadtxt(fichero_psi1, unpack=True, skiprows=5)
E_psi2, x, psi2, dpsi2 = np.loadtxt(fichero_psi2, unpack=True, skiprows=5)
E_psi3, x, psi3, dpsi3 = np.loadtxt(fichero_psi3, unpack=True, skiprows=5)
E_psi4, x, psi4, dpsi4 = np.loadtxt(fichero_psi4, unpack=True, skiprows=5)

def Vb(a,b):
    res = b**2/(4*a)
    return res

def x1(n,a,b):
    res = np.sqrt(np.sqrt(b**2-4*Vb(a,b)*a+4*E[n]*a)/a+b/a)/np.sqrt(2)
    return res
def x2(n,a,b):
    res = np.sqrt(b/a-np.sqrt(b**2-4*Vb(a,b)*a+4*E[n]*a)/a)/np.sqrt(2)
    return res

# GRAFICA
nombre_grafica = 'dinamica_1_b={}.pdf'.format(b)
print('b={}'.format(b))

xmin = -4
xmax = 4
ymin = 0
ymax = 4.5

# Por debajo de la barrera
if b==1:
    n_barrera = 0
elif b==2:
    n_barrera = 1
elif b==3:
    n_barrera = 2
elif b==4:
    n_barrera = 2
elif b==5:
    n_barrera = 4
elif b==10:
    n_barrera = 4

# width as measured in inkscape
width = 15.922
width = 7.2 * 1.5
# height = width / 1.618
height = 4.45*1.5

fig, axs = plt.subplots(2,2, figsize=(width, height), sharex=True, sharey='row', squeeze=False)
fig.subplots_adjust(left = 0.125,  # the left side of the subplots of the figure
                    right = 0.9,   # the right side of the subplots of the figure
                    bottom = 0.1,  # the bottom of the subplots of the figure
                    top = 0.2,     # the top of the subplots of the figure
                    wspace = 0.2,  # the amount of width reserved for space between subplots,
                                  # expressed as a fraction of the average axis width
                    hspace = 0.2,  # the amount of height reserved for space between subplots,
                                  # expressed as a fraction of the average axis height)
                                )

ax = axs[0][0]
ax.plot(x, V, color='grey')

ax.hlines(y = E_psi1[0], xmin=xmin, xmax=xmax, color='black', lw=1.0)

ax.plot(x,  psi1, label=r'$\left| \psi \right>$', color=colores[1])
ax.plot(x, dpsi1, label=r'$\left| \psi \right|^2$', color=colores[0])

for i in np.arange(0,n_barrera):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
    ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

# Por encima de la barrera
for i in np.arange(n_barrera,len(E)):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set(ylabel=r'$E\ (\mathrm{Ha})$')
ax.set_title(r'a) $\left| \psi \right> = \frac{1}{\sqrt{2}} \left| \Phi_0 \right> + \frac{1}{\sqrt{2}} \left| \Phi_1 \right> $', pad=15)

ax.legend(loc='lower left')


ax = axs[0][1]
ax.plot(x, V, color='grey')

ax.hlines(y = E_psi1[0], xmin=xmin, xmax=xmax, color='black', lw=1.0)

ax.plot(x,  psi2, label=r'$\left| \psi \right>$', color=colores[1])
ax.plot(x, dpsi2, label=r'$\left| \psi \right|^2$', color=colores[0])

for i in np.arange(0,n_barrera):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
    ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

# Por encima de la barrera
for i in np.arange(n_barrera,len(E)):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set_title(r'b) $\left| \psi \right> = \frac{1}{\sqrt{2}} \left| \Phi_0 \right> - \frac{1}{\sqrt{2}} \left| \Phi_1 \right> $', pad=15)

ax.legend(loc='lower left')

ax.text(xmax+xmax/15, E_psi1[0], r'$E={}$'.format(E_psi1[0])+r' (Ha)', fontsize=12, horizontalalignment='left', verticalalignment='center')

# ax.text(0.02, 0.975, 'a)', fontsize=14, bbox=dict(facecolor='white', alpha=0.5), horizontalalignment='left', verticalalignment='top', transform=ax.transAxes)

xmin = -4
xmax = 4
ymin = 0
ymax = 7

ax = axs[1][0]
ax.plot(x, V, color='grey')

for i in np.arange(0,n_barrera):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
    ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

# Por encima de la barrera
for i in np.arange(n_barrera,len(E)):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

ax.hlines(y = E_psi3[0], xmin=xmin, xmax=xmax, color='black', lw=1.0)

ax.plot(x,  psi3, label=r'$\left| \psi \right>$', color=colores[0])
ax.plot(x, dpsi3, label=r'$\left| \psi \right|^2$', color=colores[1])

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set(xlabel=r'$x\ (a_0)$', ylabel=r'$E\ (\mathrm{Ha})$')
ax.set_title(r'c) $\left| \psi \right> = \frac{1}{\sqrt{2}} \left| \Phi_2 \right> + \frac{1}{\sqrt{2}} \left| \Phi_3 \right> $', pad=15)

ax.legend(loc='lower left')

# ax.text(0.02, 0.975, 'a)', fontsize=14, bbox=dict(facecolor='white', alpha=0.5), horizontalalignment='left', verticalalignment='top', transform=ax.transAxes)

ax = axs[1][1]
ax.plot(x, V, color='grey')

for i in np.arange(0,n_barrera):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=-x2(i,a,b), color='black', lw=1.0)
    ax.hlines(y = E[i], xmin=x2(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

# Por encima de la barrera
for i in np.arange(n_barrera,len(E)):
    ax.hlines(y = E[i], xmin=-x1(i,a,b), xmax=x1(i,a,b), color='black', lw=1.0)

ax.hlines(y = E_psi3[0], xmin=xmin, xmax=xmax, color='black', lw=1.0)

ax.plot(x,  psi4, label=r'$\left| \psi \right>$', color=colores[0])
ax.plot(x, dpsi4, label=r'$\left| \psi \right|^2$', color=colores[1])

ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)

ax.set(xlabel=r'$x\ (a_0)$')
ax.set_title(r'd) $\left| \psi \right> = \frac{1}{\sqrt{2}} \left| \Phi_2 \right> - \frac{1}{\sqrt{2}} \left| \Phi_3 \right>$', pad=15)

ax.legend(loc='lower left')

ax.text(xmax+xmax/15, E_psi3[0], r'$E={}$'.format(E_psi3[0])+r' (Ha)', fontsize=12, horizontalalignment='left', verticalalignment='center')

# ax.text(0.02, 0.975, 'a)', fontsize=14, bbox=dict(facecolor='white', alpha=0.5), horizontalalignment='left', verticalalignment='top', transform=ax.transAxes)

ax=axs[0][0]
ax.text(0.02, 0.97, 'a)', fontsize=14, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes)
ax=axs[0][1]
ax.text(0.02, 0.97, 'b)', fontsize=14, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes)
ax=axs[1][0]
ax.text(0.02, 0.97, 'c)', fontsize=14, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes)
ax=axs[1][1]
ax.text(0.02, 0.97, 'd)', fontsize=14, horizontalalignment='left', verticalalignment='top', transform=ax.transAxes)




plt.savefig(nombre_grafica, transparent='True')
# plt.show()
