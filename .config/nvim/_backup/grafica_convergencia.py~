# Import packages
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import pandas as pd
import tikzplotlib as tk

from matplotlib.cm import get_cmap

from scipy.interpolate import make_interp_spline, BSpline

# Import my own plot style
plt.style.use('mine')
#plt.style.use('ggplot')
#plt.style.use('seaborn')

# Data for plotting

d, N, W0, W1, W2, W3 = np.loadtxt('../data/out-convergencia_oscilador_cuartico_2.dat',
                                                         unpack=True, skiprows=1)

# Colores del cycler
colores=['#008fd5', '#fc4f30', '#e5ae38', '#6d904f', '#8b8b8b', '#810f7c']

# Grafico
fig, axs = plt.subplots(1,3, figsize=(9.2, 9.2/3))

## d=0.1 ##
# Lineas grises
axs[0].plot((N[0]+0.1,N[1]-0.1),(W0[0],W0[1]), lw=1.0, linestyle='--', color='gray')
axs[0].plot((N[1]+0.1,N[2]-0.1),(W0[1],W0[2]), lw=1.0, linestyle='--', color='gray')
axs[0].plot((N[0]+0.1,N[1]-0.1),(W1[0],W1[1]), lw=1.0, linestyle='--', color='gray')
axs[0].plot((N[1]+0.1,N[2]-0.1),(W1[1],W1[2]), lw=1.0, linestyle='--', color='gray')
axs[0].plot((N[1]+0.1,N[2]-0.1),(W2[1],W2[2]), lw=1.0, linestyle='--', color='gray')

# Lineas negras
for i in range(3):
    axs[0].plot((N[i]-0.1,N[i]+0.1),(W0[i],W0[i]), lw=2.0, color='black')
    axs[0].plot((N[i]-0.1,N[i]+0.1),(W1[i],W1[i]), lw=2.0, color='black')
    if i>=1:
        axs[0].plot((N[i]-0.1,N[i]+0.1),(W2[i],W2[i]), lw=2.0, color='black')
    if i==2:
        axs[0].plot((N[i]-0.1,N[i]+0.1),(W3[i],W3[i]), lw=2.0, color='black')

## d=0.5 ##
# Lineas grises
axs[1].plot((N[0]+0.1,N[1]-0.1),(W0[3],W0[4]), lw=1.0, linestyle='--', color='gray')
axs[1].plot((N[1]+0.1,N[2]-0.1),(W0[4],W0[5]), lw=1.0, linestyle='--', color='gray')
axs[1].plot((N[0]+0.1,N[1]-0.1),(W1[3],W1[4]), lw=1.0, linestyle='--', color='gray')
axs[1].plot((N[1]+0.1,N[2]-0.1),(W1[4],W1[5]), lw=1.0, linestyle='--', color='gray')
axs[1].plot((N[1]+0.1,N[2]-0.1),(W2[4],W2[5]), lw=1.0, linestyle='--', color='gray')

# Lineas negras
for i in [3,4,5]:
    axs[1].plot((N[i]-0.1,N[i]+0.1),(W0[i],W0[i]), lw=2.0, color='black')
    axs[1].plot((N[i]-0.1,N[i]+0.1),(W1[i],W1[i]), lw=2.0, color='black')
    if i>=4:
        axs[1].plot((N[i]-0.1,N[i]+0.1),(W2[i],W2[i]), lw=2.0, color='black')
    if i==5:
        axs[1].plot((N[i]-0.1,N[i]+0.1),(W3[i],W3[i]), lw=2.0, color='black')

## d=1.0 ##
# Lineas grises
axs[2].plot((N[0]+0.1,N[1]-0.1),(W0[6],W0[7]), lw=1.0, linestyle='--', color='gray')
axs[2].plot((N[1]+0.1,N[2]-0.1),(W0[7],W0[8]), lw=1.0, linestyle='--', color='gray')
axs[2].plot((N[0]+0.1,N[1]-0.1),(W1[6],W1[7]), lw=1.0, linestyle='--', color='gray')
axs[2].plot((N[1]+0.1,N[2]-0.1),(W1[7],W1[8]), lw=1.0, linestyle='--', color='gray')
axs[2].plot((N[1]+0.1,N[2]-0.1),(W2[7],W2[8]), lw=1.0, linestyle='--', color='gray')

# Lineas negras
for i in [6,7,8]:
    axs[2].plot((N[i]-0.1,N[i]+0.1),(W0[i],W0[i]), lw=2.0, color='black')
    axs[2].plot((N[i]-0.1,N[i]+0.1),(W1[i],W1[i]), lw=2.0, color='black')
    if i>=7:
        axs[2].plot((N[i]-0.1,N[i]+0.1),(W2[i],W2[i]), lw=2.0, color='black')
    if i==8:
        axs[2].plot((N[i]-0.1,N[i]+0.1),(W3[i],W3[i]), lw=2.0, color='black')

# Texto
axs[0].text(N[2]+0.2, W0[2], r'$W_0$')
axs[0].text(N[2]+0.2, W1[2], r'$W_1$')
axs[0].text(N[2]+0.2, W2[2], r'$W_2$')
axs[0].text(N[2]+0.2, W3[2], r'$W_3$')

axs[1].text(N[2]+0.2, W0[5], r'$W_0$')
axs[1].text(N[2]+0.2, W1[5], r'$W_1$')
axs[1].text(N[2]+0.2, W2[5], r'$W_2$')
axs[1].text(N[2]+0.2, W3[5], r'$W_3$')

axs[2].text(N[2]+0.2, W0[8], r'$W_0$')
axs[2].text(N[2]+0.2, W1[8], r'$W_1$')
axs[2].text(N[2]+0.2, W2[8], r'$W_2$')
axs[2].text(N[2]+0.2, W3[8], r'$W_3$')

# Otros
axs[0].set(xlabel=r'$N$', ylabel=r'$W_n$', title=r'$d=0.1$')
axs[1].set(xlabel=r'$N$', title=r'$d=0.5$')
axs[2].set(xlabel=r'$N$', title=r'$d=1.0$')
# axs[0].set_xlim(1.5,4.5)
# Numero de ticks
# axs[0].locator_params(axis="x", nbins=4)

for ax in axs.flat:
    ax.set_xlim(1.5,4.6)
    # ax.set_ylim(0, 2)
    # ax.grid()
    # ax.legend(loc=(1.01,0.1))
    # Numero de ticks
    ax.locator_params(axis="x", nbins=4)
    # ax.locator_params(axis="y", nbins=2)


plt.savefig('grafica_convergencia_oscilador_cuartico.pdf', transparent='True', bbox_inches='tight')
# plt.show()
